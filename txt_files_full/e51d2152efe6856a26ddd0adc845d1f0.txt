Informatik D: Einführung in die Theoretische Informatik

VO 11

Abschlusseigenschaften

Turingmaschinen

Prof. Dr. Markus Chimani

Theoretische Informatik, Uni Osnabrück

Sommersemester 2016

Algorithmische Fragen

Wiederholung

Sei L eine (D)KF Sprache (als Grammatik G mit L = L(G)).
Anmerkung: NDKA nicht so leicht zu simulieren, wie
deterministische Automaten...
Wortproblem. Sei w ein Wort. Ist w ∈ L?
Schon erwähnt: KF O(|w|3), DKF O(|w|)

Aber es gibt viele weitere Fragen:

(cid:73) Leerheitsproblem (L = ∅?)
(cid:73) Endlichkeitsproblem (L endlich?)
(cid:73) Erzeugt G jedes beliebige Wort?
(cid:73) Ist L/G eindeutig?
(cid:73) Ist L/G DKF?
(cid:73) Ist L/G regulär?

Kontextfreie Sprachen Algorithmische Fragen und Abschlusseigenschaften

Leerheitsproblem: L(G) = ∅?

VO 11 — 162

Algorithmus:

1 Anfangs sind alle Variablen unmarkiert.

Wir wollen alle Variablen markieren, die auf irgendeine
Art bis zu einem Wort (also Symbolkette) expandiert
werden können.

2 Solange eine Regel A → x existiert, wobei A unmarkiert

ist, und x nur aus Symbolen und/oder markierten
Variablen besteht: Markiere A.

3 Falls durch diesen Prozess die Startvariable S markiert

wird: L(G) (cid:54)= ∅; sonst L(G) = ∅.

Komplexität: (wenn man es geschickt macht) O(|G|)

Kontextfreie Sprachen Algorithmische Fragen und Abschlusseigenschaften

VO 11 — 163

Leerheitsproblem — Beispiel

Beispiel G1:

Beispiel G2:

S → AaB | CD
A → Bb | D
B → CC
C → c
D → DBD

S → AaB | CD
A → a | Aaa
B → DC
C → c
D → DdD

⇒ L(G1) (cid:54)= ∅
(Sogar nur ein einziges
Wort: ccbacc)

⇒ L(G2) = ∅

Kontextfreie Sprachen Algorithmische Fragen und Abschlusseigenschaften

VO 11 — 164

Endlichkeitsproblem: L(G) endlich?

Algorithmus:

1 Reduziere Grammatik mit Hilfe des Leerheitstests:

Entferne alle unmarkierten Variablen und Regeln A → x
bei denen x unmarkierte Variablen enthält.

2 Reduziere Grammatik auf erreichbare Variablen:

Markiere (neu!) nur die Startvariable. Für jede Regel A → x
mit markiertem A markiere unmarkierte Variablen in x.
Am Ende entferne unmark. Variablen und zugeh. Regeln.
3 Transformiere Grammatik in eine ohne Regeln A → B für

A, B ∈ V (vrgl. Transformation in CNF).

4 Erstelle Hilfsgraph H mit den Variablen als Knoten, und
(∀A, B ∈ V) einer gerichteten Kante (A, B) falls es eine
Regel A → x B y gibt, wobei x, y beliebige Satzformen
(=Ketten von Symbolen und Variablen) sind.

5 H enthält einen gerichteten Kreis ⇐⇒ |L(G)| = ∞
Komplexität: O(|G|)

Kontextfreie Sprachen Algorithmische Fragen und Abschlusseigenschaften

VO 11 — 165

Endlichkeitsproblem — Beispiel

Beispiel G1:

Beispiel G2:

S → AB | cc
A → aB | Caa
B → bC | CC
C → c

A

S

C

B

S → AB | cc
A → aB | Caa
B → bC | CC | dSd
C → c | cC

A

S

C

B

⇒ |L(G1)| (cid:54)= ∞

⇒ |L(G2)| = ∞
(Sogar wegen dreier Kreise:
S-A-B-S, S-B-S, C-C)

Kontextfreie Sprachen Algorithmische Fragen und Abschlusseigenschaften

VO 11 — 166

Weitere algorithmische Fragen...

Zum Beispiel wäre auch interessant zu entscheiden, ob für
eine gegebene KF Sprache L bzw. KF Grammatik G gilt:

(cid:73) Erzeugt G jedes beliebige Wort, also L(G) = Σ∗?
(cid:73) Ist L/G eindeutig?
(cid:73) Ist L/G DKF?
(cid:73) Ist L/G regulär?

Oder für zwei KF Grammatiken G1, G2:

(cid:73) L(G1) = L(G2)?
(cid:73) L(G1) ⊆ L(G2)?
(cid:73) L(G1) ∩ L(G2) = ∅?
(cid:73) Ist L(G1) ∩ L(G2) KF?

All diese Fragen sind unentscheidbar!
→ Es kann keinen Algorithmus geben (egal wie langsam),
der diese Fragen immer korrekt entscheidet!
→ Was das genau bedeutet werden wir noch kennenlernen.

Kontextfreie Sprachen Algorithmische Fragen und Abschlusseigenschaften

VO 11 — 167

Abgeschlossenheit

Theorem.
Kontextfreie Sprachen sind abgeschlossen bezüglich
Verkettung und Vereinigung, aber nicht bezüglich Schnitt
und Komplementbildung.
D.h. gegeben KF Sprachen L1, L2 durch Grammatiken G1, G2 mit disj.
Variablenmengen V1, V2 (V1 ∩ V2 = ∅) und Startvariablen S1, S2.
⇒ L1 L2 & L1 ∪ L2 sind KF. L1 ∩ L2 & L1 := Σ∗ \ L1 sind nicht immer KF.
Beweis (Abgeschl.)
Grammatik mit Startvar.
S, allen Regeln aus
G1, G2 und der Regel...
... S → S1S2
... S → S1 | S2

(Nicht abgeschlossen)
Schnitt. Beispiel: KF Sprachen
L1 = anbncm, L2 = ambncn.
L1 ∩ L2 = anbncn ist nicht KF.
Komplement. Sonst wäre auch
Schnitt abgeschlossen!
Schnitt durch Vereinigung &
Komplement: L1 ∩ L2 = L1 ∪ L2

(Verkettung)

(Vereinigung)

Kontextfreie Sprachen Algorithmische Fragen und Abschlusseigenschaften

VO 11 — 168

Abgeschlossenheit

Theorem. (nur Beweisskizzen)
Deterministische kontextfreie Sprachen sind abgeschlossen
bezüglich Komplementbildung, aber nicht bezüglich
Schnitt, Vereinigung und Verkettung.

Komplement. Nimm DKA-AdEZ. Neuer Start & Übergang zum
alten Start der $ (cid:54)∈ Γ unter # schreibt (verhindert leeren
Keller). Invertiere End-Nichtend-Zustände (inkl. Falle).
Schnitt. Beispiel-Sprachen von vorhin waren sogar DKF.
Vereinigung. Sonst müsste wegen L1 ∩ L2 = L1 ∪ L2 auch der
Schnitt abgeschlossen sein.
Verkettung. Beispiel: DKF Sprachen L1 = $anbncm und
L2 = ambncn. Durch $ ist auch L3 := L1 ∪ L2 DKF (durch DKA
erkennbar). Sprache L4 := $+ ist DKF (sogar regulär)!
Betrachte Verkettung L := L4 L3 → $ nicht mehr hilfreich um L1
und L2 zu unterscheiden.

Kontextfreie Sprachen

Zusammenfassung

Kontextfreie Sprachen Zusammenfassung

VO 11 — 170

Kontextfreie Sprachen: Zusammenfassung

(cid:73) Kontextfreie Sprachen werden durch kontextfreie
Grammatiken und durch nicht-deterministische
Kellerautomaten beschrieben.

(cid:73) Jede KF Grammatik kann in Chomsky- und

Greibach-Normalform geschrieben werden.

(cid:73) Deterministische KF Sprachen werden durch

deterministische Kellerautomaten beschrieben.

(cid:73) Jede DKF Sprache ist eindeutig, aber nicht umgekehrt.
(cid:73) KF Sprachen erfüllen das Pumping Lemma.
(cid:73) KF Sprachen erlauben das efﬁziente Entscheiden des

Wort-, Leerheits- und Endlichkeitsproblems.

Turingmaschinen &

Berechenbarkeit

Turingmaschinen &

Berechenbarkeit

Sprachen jenseits von kontextfrei

Turingmaschinen & Berechenbarkeit Sprachen jenseits von kontextfrei

VO 11 — 173

Chomsky-Hierarchie

Einschränkungen für die Regeln x → y:
Typ 0
Rekursiv aufzählb.

Typ 0: Rekursiv aufzählbare

Sprachen
keine Einschränkungen

Typ 1: Kontextsensitive (bzw.

monotone) Sprachen
|x| ≤ |y|

Typ 2: Kontextfreie Sprachen

Typ 3: Reguläre Sprachen

Typ 1, und x ∈ V (links
eine einzelne Variable)
x ∈ V, y ∈ Σ ∪ ΣV (rechts
ein Symbol, ggf. gefolgt
von einer Variable)

Typ 1
Kontextsensitiv

Typ 2
Kontextfrei

(DKF)

Typ 3
Regulär

r
e
k
r
ä
t
s
s
k
c
u
r
d
s
u
a
d
r
i
w
e
h
c
a
r
p
S

r
e
t
h
c
i
e

l

l

d
r
i
w
m
e
b
o
r
p
t
r
o
W

Turingmaschinen & Berechenbarkeit Sprachen jenseits von kontextfrei

VO 11 — 174

Probleme vs. Maschinen

Sprache

Äquivalent zu

Rekursiv
aufzählbar

Kontextsensitiv

Kontextfrei

Deterministisch
Kontextfrei
Regulär

Turingmaschine
(≈Computer)
linear beschränkter
Automat
nicht-determ.
Kellerautomat
deterministischer
Kellerautomat
Endlicher Automat

Komplexität d.
Wortproblems
(Laufzeit/Speicher)

nicht entscheidbar

exponentiell/linear

kubisch/quadratisch

linear/linear

linear/konstant

Turingmaschinen &

Berechenbarkeit

Turingmaschinen

Turingmaschinen & Berechenbarkeit Turingmaschinen

VO 11 — 176

Maschinen

(cid:73) Endlicher Automat

start

(cid:73) Kellerautomat = Endlicher Automat + Stack

start

(cid:73) Turingmaschine = Endlicher Automat + Speicherband

start

Turingmaschinen & Berechenbarkeit Turingmaschinen

VO 11 — 177

Alan Turing

Alan Mathison Turing
∗ 23. Juni 1912 in London
† 7. Juni 1954 in Wilmslow (England)

Der wohl wichtigste Informatiker aller Zeiten.

(cid:73) 1936: Veröffentlichung: On Computable Numbers, with

an Application to the “Entscheidungsproblem”:
Erﬁndung der Turing-Maschine, Beweise der Mächtigkeit
der Maschine

(cid:73) 1938: Promotion in Princeton unter Alonzo Church.
(cid:73) Grundlagen der theoretischen Informatik,

Berechenbarkeit (“Algorithmische Variante von Gödels
Unvollständigkeitssatz”)

Turingmaschinen & Berechenbarkeit Turingmaschinen

VO 11 — 178

Alan Turing

Alan Mathison Turing
∗ 23. Juni 1912 in London
† 7. Juni 1954 in Wilmslow (England)

Der wohl wichtigste Informatiker aller Zeiten.

(cid:73) 2. Weltkrieg: Knacken deutscher Geheimcodes (z.B. der
Enigma) im Bletchley Park, Turing-Bombe (Maschine zum
Code-Knacken),... — Anteil bis in die 70er Jahre geheim!

(cid:73) 1948: LU Faktorisierung von Matrizen
(cid:73) 1950: Turing-Test, Erkennen von Intelligenz
(cid:73) 1952–54: Mathematik in Biologie (Turing-Mechanismus)

Turingmaschinen & Berechenbarkeit Turingmaschinen

VO 11 — 179

Alan Turing

Alan Mathison Turing
∗ 23. Juni 1912 in London
† 7. Juni 1954 in Wilmslow (England)

[Selbstmord mit vergiftetem Apfel?]

Der wohl wichtigste Informatiker aller Zeiten.

(cid:73) 1952: Verurteilung wg. Homosexualität, Ausschluss aus

allen Geheimprojekten der Regierung, zwangsweise
Hormonbehandlung → Depressionen

(cid:73) 1954: Tod durch Cyanidvergiftung
(cid:73) Ihm zu Ehren seit 1966: Turing Award

≈ „Nobelpreis“ der Informatik.

(cid:73) 2009: Britische Regierung entschuldigt sich ofﬁziell,

2013: Königliche Begnadigung durch Queen Elisabeth II

Turingmaschinen & Berechenbarkeit Turingmaschinen

VO 11 — 180

Turingmaschine (TM), 1/3

start

Speicherband, unendlich lang

(cid:3) (cid:3) a

b (cid:3) a

c

(cid:3) (cid:3)

SL

Eine Turingmaschine ist ein endlicher Automat, der mit
einem Speicherband und einem Schreib-Lese-Kopf
(SL-Kopf) am Band gekoppelt ist.

(cid:73) Das Band ist unendlich lang und in Zellen unterteilt.
(cid:73) In jeder Zelle ist immer ein Symbol aus Γ gespeichert.

Das Symbol (cid:3) ∈ Γ kennzeichnet eine „leere“ Zelle.
(cid:73) Der SL-Kopf zeigt stets auf eine Zelle des Bands. Nur

dieser aktuelle Bandeintrag kann gelesen bzw.
geändert werden.

Turingmaschinen & Berechenbarkeit Turingmaschinen

VO 11 — 181

Turingmaschine (TM), 2/3

start

Speicherband, unendlich lang

(cid:3) (cid:3) a

b (cid:3) a

c

(cid:3) (cid:3)

SL

(cid:73) Zustand der Maschine = Aktueller Zustand des EA +

Inhalt des Bands + Position des SL-Kopfs

(cid:73) Zustandsübergänge im EA können abhängig vom

aktuellen Bandeintrag sein

(cid:73) Beim Zustandswechsel im EA wird...

(cid:73) ...der aktuelle Bandeintrag durch einen neuen Wert

überschrieben (ggf. durch den alten selbst).

(cid:73) ...der SL-Kopf wird ggf. um eine Zelle nach links oder

rechts verschoben.

Turingmaschinen & Berechenbarkeit Turingmaschinen

VO 11 — 182

Turingmaschine (TM), 3/3

start

Speicherband, unendlich lang

(cid:3) (cid:3) a

b (cid:3) a

c

(cid:3) (cid:3)

SL

Initialisierung:

(cid:73) Das Eingabewort wird vom EA nicht explizit gelesen.
(cid:73) Das Eingabewort steht (von links nach rechts) am Band.
(cid:73) Der SL-Kopf steht auf dem ersten Zeichen der Eingabe.

Terminierung:

(cid:73) Die Übergangsfunktion ist partiell! → Die TM terminiert

(„hält an“) wenn kein weiterer Übergang möglich ist.

(cid:73) Die TM akzeptiert das Eingabewort genau dann, wenn

sie in einem Endzustand terminiert.
→ Die TM akzeptiert nicht, genau dann wenn sie in
einem Nicht-Endzustand oder gar nicht terminiert.

Turingmaschinen & Berechenbarkeit Turingmaschinen

VO 11 — 183

Determinismus vs. Nicht-Determinismus

Wir unterscheiden wieder zwischen zwei Arten von TMn:

(cid:73) Deterministische TM (DTM): Zu jedem Zeitpunkt ist

eindeutig, welcher Übergang ausgeführt wird.

(cid:73) Nicht-deterministische TM (NDTM): Es kann

mehrdeutig sein, welchen Übergang man benutzt.

Faszinierend!

(cid:73) Sowohl DTM als auch NDTM beschreiben genau die

Typ-0 Sprachen.

(cid:73) Aus komplexitätstheoretischer Sicht ist der Unterschied
zwischen DTM und NDTM die größte offene Frage der
Informatik! (siehe später in der VO)

