Informatik D: Einführung in die Theoretische Informatik

VO 18

NP-Vollständigkeit

Prof. Dr. Markus Chimani

Theoretische Informatik, Uni Osnabrück

Sommersemester 2016

Komplexitätsklassen P und NP

Wiederholung

Deﬁnition. Die Komplexitätsklasse P umfasst alle
Entscheidungsprobleme, die sich von einer
deterministischen Turing-Maschine in polynomieller
Zeit entscheiden lassen.

Deﬁnition. Die Komplexitätsklasse NP umfasst alle
Entscheidungsprobleme, die sich von einer
nicht-deterministischen Turing-Maschine in
polynomieller Zeit entscheiden lassen.

Beobachtung. P ⊆ NP .

Komplexitätstheorie P vs. NP

VO 18 — 264

NP -vollständig

Deﬁnition.
Ein Problem X ist
NP -vollständig (engl.
NP -complete, NPC ) wenn
1 X ∈ NP , und
2 Jedes andere Problem Y ∈ NP

lässt sich deterministisch
und in polynomieller Zeit
auf X reduzieren1.

schwer

t
ä
t
i
x
e
p
m
o
K

l

leicht

NP -vollständig

NP

P

Reduzieren? Man kann aus jeder Probleminstanz J für Y eine
Probleminstanz J(cid:48) für X gewinnen, die ja liefert, genau dann
wenn J eine ja-Instanz ist (und daher auch analog für nein).

1Im Folgenden benutzen wir einfach nur den Begriff „reduzieren“ für

„deterministisch und in polynomieller Zeit reduzieren“.

VO 18 — 264

Instanzen für X

• J(cid:48)
NP -vollständig

poly. Zeit berechenbar

schwer

⇔ J(cid:48) = f ( J) ∈ IX

ist JA-Instanz

Komplexitätstheorie P vs. NP

Instanzen für Y
NP -vollständig

f : IY → IX

deterministisch in

• J

J ∈ IY ist
JA-Instanz

Deﬁnition.
Ein Problem X ist
NP -vollständig (engl.
NP -complete, NPC ) wenn
1 X ∈ NP , und
2 Jedes andere Problem Y ∈ NP

lässt sich deterministisch
und in polynomieller Zeit
auf X reduzieren1.

t
ä
t
i
x
e
p
m
o
K

l

leicht

NP

P

Reduzieren? Man kann aus jeder Probleminstanz J für Y eine
Probleminstanz J(cid:48) für X gewinnen, die ja liefert, genau dann
wenn J eine ja-Instanz ist (und daher auch analog für nein).

1Im Folgenden benutzen wir einfach nur den Begriff „reduzieren“ für

„deterministisch und in polynomieller Zeit reduzieren“.

Komplexitätstheorie P vs. NP

VO 18 — 265

NP -vollständig

Deﬁnition.
Ein Problem X ist
NP -vollständig (engl.
NP -complete, NPC ) wenn
1 X ∈ NP , und
2 Jedes andere Problem in NP
lässt sich auf X reduzieren.

schwer

t
ä
t
i
x
e
p
m
o
K

l

leicht

NP -vollständig

NP

P

(cid:73) NP -vollständige Probleme sind die

schwersten Probleme in NP .

(cid:73) Angenommen man könnte für ein NP -vollständiges
Problem X zeigen, dass X ∈ P . Dann wäre P = NP .

Komplexitätstheorie P vs. NP

VO 18 — 266

NP -intermediate

Faszinierend!
Fast alle Probleme ∈ NP für die
wir nicht ∈ P wissen, sind
tatsächlich NP -vollständig!

Theorem (Richard Ladner, 1975).
Falls P (cid:54)= NP , dann enthält NP\P
auch nicht-NP -vollständige
Probleme. (ohne Beweis.)
⇒ NP -intermediate (NPI )

schwer

t
ä
t
i
x
e
p
m
o
K

l

leicht

NP -vollständig

NP

NPI

P

Im Beweis werden sehr künstliche Probleme für NPI generiert.

Es gibt nur sehr wenige natürliche Probleme, die Kandidaten
für NPI sind:

Graph-Isomorphie, Faktorisierung,
Diskreter Logarithmus

Komplexitätstheorie P vs. NP

NP -schwer

VO 18 — 267

Deﬁnition. Ein Entscheidungs-
problem X ist NP -schwer
(NP -hart, engl. NP -hard) wenn
sich jedes Problem aus NP auf X
reduzieren lässt.
→ X ist mindestens so schwer
wie die schwersten Probleme in NP .
Beispiele:

(cid:73) Wir werden noch sehen, dass

schwer

NP -schwer

t
ä
t
i
x
e
p
m
o
K

l

NP -vollständig

NP

P

SAT NP -vollständig ist.
→ SAT ist NP -schwer.
(cid:73) Das Halteproblem (cid:54)∈ NP , sondern sogar unentscheidbar
→ Halteproblem ist NP -schwer.
(cid:73) Graph-Zusammenhangstest ∈ P
→ Graph-Zusammenhangstest ist nicht NP -schwer.

leicht

Komplexitätstheorie P vs. NP

VO 18 — 268

Suchprobleme, Optimierungsprobleme

Bisher: Immer Entscheidungsprobleme, da sich diese
formal einfach präzise als Wortprobleme über Sprachen
interpretieren lassen.

Aber: Die meisten Probleme, die wir in der Praxis betrachten,
sind keine Entscheidungsprobleme:

(cid:73) Algorithmen, die eine Lösung für ein Problem suchen,
nicht nur eine ja/nein-Antwort heißen Suchprobleme.
z.B. Sortieren, Kürzester Weg, Traveling Salesman, . . .

(cid:73) Die vielleicht wichtigsten Suchprobleme sind

(kombinatorische) Optimierungsprobleme:1
Man sucht eine Lösung mit optimalem Zielfunktionswert.
z.B. Kürzester Weg, Traveling Salesman, . . .

1Formal kann man deﬁnieren, dass Suchprobleme Lösungen suchen,
und Optimierungsprobleme nur den optimalen Zielfunktionswert. Für
uns ist diese Unterscheidung nun nicht hilfreich.

Komplexitätstheorie P vs. NP

VO 18 — 269

Optimierungsprobleme und zugehörige
Entscheidungsprobleme

Ein (kombinatorisches) Optimierungsproblem X sucht
ausgehend von einer Probleminstanz J nach einer
Lösung L, die gewisse Eigenschaften (speziﬁziert durch X ;
z.B. Pfad, Rundtour,. . . ) erfüllt, und dabei unter allen
zulässigen Lösungen diejenige mit optimalem
(minimum/maximum) Zielfunktionswert z(L) ist.

Annahme, X sei ein Minimierungsproblem.
Das zu X zugehörige Entscheidungsproblem (X , k) fragt,
ob für die Instanz J eine X -zulässige Lösung L existiert, so
dass z(L) ≤ k.
(Bei Maximierungsproblem: z(L) ≥ k)

Komplexitätstheorie P vs. NP

VO 18 — 270

Optimierung vs. Entscheidung

Sei X ein Minimierungsproblem und (X , k) das zugehörige
Entscheidungsproblem.

(cid:73) Falls X in poly-Zeit berechenbar:

Prüfen von z(L) ≤ k liefert direkt Antwort für (X , k).

(cid:73) Falls (X , k) ∈ P :

Berechne (X , k) für verschiedene Werte von k
→ Finde optimales k mittels binärer Suche
→ Lösen von X ist nur polynomiell (logarithmisch) mehr
Aufwand als (X , k) → noch immer polynomiell.
⇒ Für Such- und Optimierungsprobleme kann man
äquivalente Klassen zu P , NP , etc. deﬁnieren.
Dies ist jedoch formal fummelig, daher benutzt man zur
Komplexitätsbestimmung meist einfach das zugehörige
Entscheidungsproblem.

Komplexitätstheorie P vs. NP

VO 18 — 271

NP -schwer, nochmal

Erweiterte Deﬁnition von NP -schwer.
Ein allgemeines Problem X ist NP -schwer, wenn sich jedes
NP -vollständige Entscheidungsproblem auf X reduzieren
lässt. (→ X mindestens so schwer wie NP -vollständig)

schwer

NP -schwer
NP -schwer

NP -schwer

NP -vollständig

NP

P

t
ä
t
i
x
e
p
m
o
K

l

leicht

Entscheidungsprobleme

Such- & Optimierungsprobleme, etc.

Komplexitätstheorie

Beweisen von NP-Vollständigkeit: SAT

Komplexitätstheorie Beweisen von NP-Vollständigkeit: SAT

VO 18 — 273

Beweisaufbau

Um zu beweisen, dass ein Entscheidungsproblem X
NP -vollständig ist, muss man

1 zeigen, dass es in NP liegt (NP -membership), und
2 zeigen, dass sich jedes andere Problem Y ∈ NP auf X

reduzieren lässt.

1 ist meist trivial („Validieren eines Zeugen“).
2 ist ad hoc nicht klar, wie man das tut...
Annahme: Man kennt ein NP -vollständiges Problem Y∗
→ Jedes andere Problem Y aus NP lässt sich auf Y∗ reduziert.
→ Es reicht aus, Y∗ auf X zu reduzieren!
→ alle anderen Probleme lassen sich dann über Y∗ bis nach X
reduzieren.

Komplexitätstheorie Beweisen von NP-Vollständigkeit: SAT

VO 18 — 274

Cook-Levin: SAT ist NP-vollständig

(cid:73) Wir müssen also nur für ein einziges Problem Y∗ zeigen,
dass sich alle Probleme aus NP auf Y∗ reduzieren lassen.
(cid:73) Ab dann, für ein Problem X , nur mehr eine Reduktionen
von irgendeinem bekannten NP -vollständigen Problem
(am Anfang nur Y∗) auf X .

Dieses erste wichtige NP -vollständige Problem ist SAT:
Cook-Levin Theorem. SAT ist NP -vollständig.

Beweis. Folgt auf den nächsten Folien.

Das Theorem wurde 2x unabhängig von einander entdeckt:

(cid:73) Stephen Cook (USA), 1971
(cid:73) Leonid Levin (UdSSR), 1973 (veröffentlicht,

Ergebnis schon ein paar Jahre vorher erwähnt)

(cid:73) Levin betrachtet Such- statt Entscheidungsprobleme.

Komplexitätstheorie Beweisen von NP-Vollständigkeit: SAT

VO 18 — 275

SAT ist NP -vollständig: Beweis, 1/7

Cook-Levin Theorem. SAT ist NP -vollständig.

Beweisteil 1 : SAT ist in NP .
Gegeben eine SAT-Instanz der Größe n, mit k ≤ n Booleschen
Variablen.

Rate (Nicht-Determinismus!) die richtige Belegung der
Variablen, und überprüfe ob die Formel durch diese Belegung
erfüllt ist.

(Alle 2k Möglichkeiten werden „gleichzeitig“ überprüft, also
auch die erfüllende Belegung, falls sie existiert)

Dieser (nicht-deterministische) Algorithmus benötigt nur
polynomielle (lineare!) Zeit.
⇒ SAT ∈ NP .

(cid:3)

Komplexitätstheorie Beweisen von NP-Vollständigkeit: SAT

VO 18 — 276

SAT ist NP -vollständig: Beweis, 2/7

Cook-Levin Theorem. SAT ist NP -vollständig.

Beweisteil 2 : SAT ist NP -schwer.

(cid:73) Sei X ein bel. Entscheidungsproblem (Sprache) aus NP .
(cid:73) Es existiert eine polynomiell-beschränkte nicht-determ.

Turingmaschine M := MX die X entscheidet.

(cid:73) Sei w = a0a1a2 . . . an−1 eine Probleminstanz für X

(=initiale Bandbelegung für M).

(cid:73) Sei π(n) das Polynom, dass die Laufzeit von M bei

Eingabelänge n beschränkt.

(cid:73) Wir können annehmen: Wenn M akzeptiert, endet sie

nach genau π(n) Schritten in einem Endzustand (vorher
nichts-ändernde Endlosschleife, die nicht-deterministisch
verlassen wird).

→ baue SAT-Instanz, die erfüllbar ist genau dann wenn w ∈ X

Komplexitätstheorie Beweisen von NP-Vollständigkeit: SAT

VO 18 — 277

SAT ist NP -vollständig: Beweis, 3/7

Die SAT-Instanz benutzt die folgenden Booleschen Variablen
für alle mögl. TM-Zustände Z ∈ Z, Zeitpunkte 0 ≤ t ≤ π(n),
Bandpositionen −π(n) ≤ p ≤ π(n) und Symbole a ∈ Γ .

Zum Zeitpunkt t. . .

Zt,Z = true ⇐⇒ . . . beﬁndet sich M im Zustand Z
SLt,p = true ⇐⇒ . . . steht der SL-Kopf an Position p
Bt,p,a = true ⇐⇒ . . . steht an Band-Position p das Symbol a
Unsere SAT-Formel F hat die Gestalt R ∧ S ∧ E ∧ U1 ∧ U2:

(cid:73) Randbedingungen
(cid:73) Startsituation
(cid:73) Endsituation
(cid:73) Übergänge (U1, U2)

Komplexitätstheorie Beweisen von NP-Vollständigkeit: SAT

VO 18 — 278

SAT ist NP -vollständig: Beweis, 4/7

Randbedingungen R
Zu jedem Zeitpunkt ist der Zustand, die Position des SL-Kopfs
und der Bandinhalt eindeutig:

(cid:95)•

(SLt,p) ∧ (cid:94)

(cid:94)

(cid:95)•

p

t

p

a

(Bt,p,a)

(cid:94)

(cid:95)•

R :=

t

Z

wobei(cid:95)•

(xi) :=

(Zt,Z) ∧ (cid:94)
xi ∧ (cid:94)
(cid:95)

t

i(cid:54)=j

¬(xi ∧ xj) = genau ein xi ist true.

i

i

Beobachtung. R ist nur polynomiell groß und kann in
polynomieller Zeit erstellt werden.

Komplexitätstheorie Beweisen von NP-Vollständigkeit: SAT

VO 18 — 279

SAT ist NP -vollständig: Beweis, 5/7

Startsituation S
Variablenbelegung zum Zeitpunkt 0 soll der Anfangssituation
der TM entsprechen (Eingabe: w = a0a1a2 . . . an−1):

S := Z0,Zstart ∧ SL0,0 ∧ n−1(cid:94)

B0,p,ap ∧ (cid:94)

p=0

p<0

B0,p,(cid:3) (cid:94)

p≥n

B0,p,(cid:3)

Endsituation E
Variablenbelegung zum Zeitpunkt π(n) soll „M in einem
Endzustand“ entsprechen:

(cid:95)

Z∈Zend

E :=

Zπ(n),Z

Beobachtung. S und E sind nur polynomiell groß und können
in polynomieller Zeit erstellt werden.

Komplexitätstheorie Beweisen von NP-Vollständigkeit: SAT

VO 18 — 280

SAT ist NP -vollständig: Beweis, 6/7

Übergänge U1
Zwischen zwei Zeitpunkten ändert sich

(cid:73) der aktuellen Zustand,
(cid:73) das Symbol unter dem SL-Kopf und
(cid:73) die Position des SL-Kopfs.

Die Menge δ(Z, a) ⊆ Z × Γ × {−1, 0, 1} von 3-Tupeln (Zustand,
neues Bandsymbol, SL-Kopf Bewegung) bezeichnet die
möglichen Übergänge, ausgehend vom Zustand Z wenn a
vom Band gelesen wird.

(cid:94)

t,Z,p,a

U1 :=

(Zt,Z ∧ SLt,p ∧ Bt,p,a) → (cid:95)

(Z(cid:48),a(cid:48),d)
∈δ(Z,a)

Zt+1,Z(cid:48) ∧ SLt+1,p+d ∧ Bt+1,p,a(cid:48)



Komplexitätstheorie Beweisen von NP-Vollständigkeit: SAT

VO 18 — 281

SAT ist NP -vollständig: Beweis, 7/7

Übergänge U2
Das Band bleibt an allen anderen Stellen unverändert:

(cid:94)

(cid:16)

(cid:17)

U2 :=

(Bt,p,a ∧ ¬SLt,p) → Bt+1,p,a

t,p,a

Beobachtung. U1 und U2, und damit auch insgesamt
F = R ∧ S ∧ E ∧ U1 ∧ U2, sind nur polynomiell groß und können
in polynomieller Zeit erstellt werden.

Hauptbeobachtung.
Ein akzeptierendes (M, w) führt zu einer erfüllbaren Formel F.
Eine erfüllbare Formel F beschreibt einen akzeptierenden
Rechenweg für (M, w).
⇒ Wenn man SAT lösen kann, kann man jedes Problem aus NP
(cid:3)
(kodiert als (M, w)) lösen.

