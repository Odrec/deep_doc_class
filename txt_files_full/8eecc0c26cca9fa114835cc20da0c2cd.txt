Buildmanagement
Werkzeuge im Vergleich

Svantje Jung

5. Januar 2015

Inhalt

Inhalt

1 Buildmanagement
2 Werkzeuge

make

Makeﬁle

Ant

build.xml

Maven

pom.xml

3 Vergleichskriterien

Plattform

Build Script Generation

Sprachkonzept
Konﬁgurationsaufwand
Abh¨angigkeitsmanagement
Zusammenfassung

4 Quellen

2

Buildmanagement

Buildmanagement

“Das Buildmanagement beschreibt den Prozess, mit dem nach Vorgaben
des KM [KM = Konﬁgurationsmanagement] aus den oder aus bestimmten
Konﬁgurationselementen Ihr Produkt oder Teile davon gebaut werden.“
[Grande, 2013]

erm¨oglicht:

Produktivit¨atssteigerung
Erstellung qualitativer Software [Grande, 2013]
Transparenz durch klare Struktur

3

Buildmanagement

Ziele und Funktionsweise

Ziele und Funktionsweise

Gegeben: gleiche bzw. ¨ahnliche Arbeitsschritte
manuelle Erstellung
→ fehleranf¨allig
→ schlecht reproduzierbare Ergebnisse

Idee:

automatischer Aufruf von Kommandos
Vermeidung unn¨otiger Neukompilationen
automatische Portierung auf unterschiedliche Plattformen erm¨oglichen

4

Buildmanagement

Automatisierungsschritte

Potentielle Automatisierungsschritte

nach [Schatten et al., 2010]:

Sourcecode Validierung

Kompilieren von Software

Dependency Management

Generierung von Dokumentation

Zusammenstellen von Software f¨ur die Auslieferung

5

make

Werkzeuge

make

Entwicklung: 1970er

viele Varianten (z.B. GNU make)

Builddatei: Makeﬁle

rule, target, dependencies, recipe, comment
beliebig komplex erweiterbar

6

Werkzeuge

make

Beispiel: Makeﬁle

FILES = HelloWorld.java Element.java
CLASSES = $(addprefix $(BIN)/,$(FILES:.java=.class))
JAR = MakeDemo.jar
BIN = ./bin

.PHONY: clean jar all run

all: $(CLASSES)

$(BIN)/%.class: %.java bin
javac -d $(BIN) $<

jar: $(JAR)

$(JAR): $(CLASSES) Manifest

jar -cvfm $@ Manifest -C bin .

Manifest:

echo Main-Class: HelloWorld>Manifest

$(BIN):

clean:

mkdir $@

rm -rf Manifest
rm -rf $(JAR)
rm -rf $(BIN)

run: $(JAR)

java -jar $< Welt

7

Apache Ant

Werkzeuge

Ant

ver¨oﬀentlicht: 2000
Another Neat Tool
plattformunabh¨angig (Java)
erweiterbar

Builddatei: build.xml

project
property
target

1

1

Apache-Ant-logo“, designed by Nick King - Apache License 2.0
”

8

Beispiel: build.xml

Werkzeuge

Ant

<project name="Beispiel" default="init" basedir=".">

<property name="src.dir" value="${basedir}/src" />
<property name="bin.dir" value="${basedir}/bin" />

<target name="init">

<mkdir dir="build"/>

</target>

<target name="compile" depends="init">

<javac srcdir="src" destdir="build"/>

</target>

<target name="clean">

<delete dir="${bin.dir}"/>

</target>

</project>

9

Apache Maven

Werkzeuge Maven

2

ver¨oﬀentlicht: 2004
Motivation: Buildvorgang vereinheitlichen

Standard Directory Layout
aktives Abh¨angigkeitsmanagement (central repository)

Builddatei: pom.xml

Project Object Model

2

Maven logo“ von Apache Software Foundation
”

10

mavenBeispiel: pom.xml

Werkzeuge Maven

<project xmlns="http://maven.apache.org/POM/4.0.0"

xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0

http://maven.apache.org/maven-v4_0_0.xsd">

<modelVersion>4.0.0</modelVersion>
<groupId>com.mycompany.app</groupId>
<artifactId>mee-app</artifactId>
<packaging>jar</packaging>
<version>1.0-SNAPSHOT</version>
<name>my-app</name>
<url>http://maven.apache.org</url>
<dependencies>
<dependency>

<groupId>junit</groupId>
<artifactId>junit</artifactId>
<version>3.8.1</version>
<scope>test</scope>

</dependency>
</dependencies>

</project>

11

Demonstration

Demonstration der Werkzeuge

12

Vergleichskriterien

Plattform

Vergleich: Plattform

Plattformunabh¨angige Entwicklung generell schwieriger

make

eingeschr¨ankt plattformunabh¨angig

Ant

plattformunabh¨angig

Maven

plattformunabh¨angig

Empfehlung: Standardkommandos verwenden [Mecklenburg, 2004]

13

Vergleichskriterien

Plattform

Build Script Generation

automatische Erzeugung von Builddateien
M¨oglichkeit Makeﬁles automatisch plattformunabh¨angiger zu
gestalten

Skripte zur Konﬁguration der Benutzerumgebung

Vereinfachung der Benutzung von Software, nicht der Entwicklung
[Calcote, 2010]

Werkzeuge: conﬁgure, GNU Autotools, CMake

$ .configure
$ make
$ make install

14

Vergleichskriterien

Sprachkonzept

Vergleich: Sprachkonzept

make

beschreibend (Kommentare, Variablendeﬁnition, Regeln)
Regel besteht aus: Name, Abh¨angigkeit(en) [und Shell-Kommando(s)]
deklarativ, imperativer Kommandoaufruf

Ant

implementiert in Java
Builddatei mit XML-Syntax
Tasks der Builddatei in Java implementiert
deklarativ, imperativer Kommandoaufruf

Maven

vergleichbar zu Ant
deklarativ, erst in Plugin-Implementierung imperativer Aufruf

15

Vergleichskriterien

Konﬁgurationsaufwand

Vergleich: Konﬁgurationsaufwand

h¨angt stark von den Anforderungen und Komplexit¨at ab

make

kleine Projekte: recht schnell erstellt
große Projekte: komplex, un¨ubersichtlich

⇒ hoch

Ant
⇒ hoch

Entwickler muss Projekt komplett konﬁgurieren

Maven

Standard Directory Layout
zentrales Repository

⇒ niedriger (durch Convention Over Conﬁguration gefordert)

16

Vergleichskriterien

Abh¨angigkeitsmanagement

Vergleich: Abh¨angigkeitsmanagement

make

Entwickler ist verantwortlich

Ant

Entwickler ist verantwortlich

Maven

zentrales Repository

zentrales Repository n¨utzlich → Apache Ivy + Ant ¨ahnliche
Funktionalit¨at wie Maven

17

Vergleichskriterien

Zusammenfassung

Zusammenfassung

Buildmanagement ist auf den ersten Blick evtl. aufw¨andig, aber:
“Abgesehen von wirklich sehr kleinen Systemen lohnt es sich [...] fast
immer ein automatisches Erstellungstool zu verwenden.“
[Sommerville, 2012]

make und Ant relativ ¨ahnlich zueinander
Maven sticht durch wenig Konﬁgurationsaufwand und ein zentrales
Repository hervor

weitere Buildwerkzeuge:

Gradle
Cabal
Waf

18

Ende

Vielen Dank f¨ur eure Aufmerksamkeit!

19

Quellen

Quellen

Alexander Schatten et al.
Best Practice Software-Engineering
Spektrum Akademischer Verlag - 2010 - ISBN: 978-3-8274-2487-7

Ian Sommerville
Software Engineering
Pearson Studium - 2012 - 9. Auﬂage - ISBN: 978-3-86894-099-2

Marcus Grande
100 Minuten f¨ur Konﬁgurationsmanagement - Kompaktes Wissen nicht nur f¨ur
Projektleiter und Entwickler
Vieweg+Teubner Verlag - 2013 - ISBN: 978-3-8348-2308-3

Robert Mecklenburg
Managing Projects with GNU Make, Third Edition.
O’Reilly Media - 2004 - ISBN: 978-0-596-00610-5

John Calcote
AUTOTOOLS - A Practitioner’s Guide to GNU Autoconf, Automake, and Libtool.
No Starch Press - 2010 - ISBN: 978-1-59327-206-7

20

