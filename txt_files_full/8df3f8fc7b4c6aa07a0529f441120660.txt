Informatik D: Einführung in die Theoretische Informatik

VO 1

Organisatorisches

Grundlagen

Prof. Dr. Markus Chimani

Theoretische Informatik, Uni Osnabrück

Sommersemester 2016

Einleitung

Einleitung

Organisatorisches

VO 1 — 4

Einleitung Organisatorisches

Vorlesung

2x pro Woche:

(cid:73) Donnerstags, 14:15 – 15:45 @ 32/102
(cid:73) Freitags,
10:15 – 11:45 @ 32/102
Unterlagen:

(cid:73) Diese Folien, online → Stud.IP
(cid:73) Empfehlung: eines der folgenden Bücher:

(cid:73) Uwe Schöning.

„Theoretische Informatik – kurz gefasst“
Spektrum Akad. Verlag, 5. Auﬂ., 190 Seiten, 20€.

(cid:73) J. E. Hopcroft, R. Motwani, J. Ullman.

„Einführung in Automatentheorie, Formale Sprachen
und Berechenbarkeit“
Pearson Studium. 3. Auﬂ., 592 Seiten, 49.90€.

Einleitung Organisatorisches

VO 1 — 5

Vorlesungsprüfung

Zulassung zur Prüfung

(cid:73) Erfolgreiches Bestehen der Übung (siehe nächste Folie)
(cid:73) Ausnahme: Wiederholtes Antreten

(d.h. schon in einem der vergangenen Jahren die Übung
bestanden und/oder schon einmal vorher an Klausur
teilgenommen)

Prüfungsmodus:

(cid:73) Schriftliche Klausur am Montag, 11. Juli, 13:00–16:00
(cid:73) Nachklausur am Ende der vorlesungsfreien Zeit
(cid:73) Dauer: 120min
(cid:73) Fragestellungen:

(cid:73) Deﬁnitionen, Zusammenhänge, Beweisideen, und
(cid:73) Aufgabenstellungen ähnlich der Übung

Einleitung Organisatorisches

VO 1 — 6

Übung

(cid:73) wöchentlich, vier versch. Termine (=Übungsgruppen).
(cid:73) Übungsgruppenleiter: Ivo Hedtke, Tilo Wiedera
(cid:73) Anmeldung und Gruppeneinteilung: Präferenzen in

Stud.IP eintragen → verpﬂichtend bis Sonntag Nacht!

(cid:73) Übungsblatt: immer 1 Woche vorab online (→ Stud.IP)
(cid:73) „Kreuzerl-Übung“: Ankreuzen, welche Aufgaben gelöst

(kreuzerl.cs.uos.de, Stud.IP-Login).
Gruppenleiter wählt per Pseudozufall jemanden zum
Vorrechnen an der Tafel aus.

(cid:73) Voraussetzung für das Bestehen der Übung:

(cid:73) mindestens 70% der Übungsaufgaben angekreuzt
(cid:73) Bei zu unrecht angekreuzter Aufgabe:

1. Vergehen: Keine Bewertung des Übungsblatts.
2. Vergehen: Kein Bestehen der Übung.

Einleitung

Thema der Vorlesung

Einleitung Thema der Vorlesung

VO 1 — 8

Fragestellungen

(cid:73) Beobachtung: In der Praxis gibt es viele verschiedene

Computermodelle... und doch, von Gimmicks wie
Graphikleistung abgesehen, tun sie alle das selbe: sie
rechnen irgendetwas

(cid:73) Was ist eine „einfache“ Beschreibung eines Computers

der (prinzipiell) alles kann, was ein Supercomputer,
traditioneller PC, Notebook, Tablet/Pad, Smartphone
kann?

(cid:73) Was kann ein Computer alles theoretisch berechnen?

Was kann kein Computer berechnen??

(cid:73) Was kann ein Computer efﬁzient berechnen?

Was bedeutet Efﬁzienz?

. . . dazu müssen wir leider ein bisschen ausholen. . .

Einleitung Thema der Vorlesung

VO 1 — 9

Themenübersicht

(cid:73) Formale Sprachen und Automaten

Wie kann ich zu lösende Probleme überhaupt deﬁnieren?
Wie kann ich Lösungsmethoden bzw. Berechnungen
deﬁnieren?

(cid:73) Berechenbarkeitstheorie

Was kann ein Computer prinzipiell (nie) berechnen?

(cid:73) Komplexitätstheorie
Was bedeutet Efﬁzienz?
Was kann ein Computer prinzipiell (nie) efﬁzient
berechnen?

Einleitung

Formale Grundlagen

Einleitung Formale Grundlagen

VO 1 — 11

Griechische Buchstaben

Alpha
Beta
Gamma
Delta
Epsilon
Zeta
Eta

A α
B β
Γ
γ
∆ δ
E
ε
Z ζ
H η
Θ θ ϑ Theta
I
ι
K
κ
Λ λ
M µ

Iota
Kappa
Lambda
My (Mü)

Ny (Nü)
Xi
Omikron

N ν
Ξ ξ
O o
Π π  Pi
P
ρ 
Σ σ ς
T
τ
Υ υ
Φ φ ϕ Phi
Chi
X χ
Psi
Ψ ψ
Omega
Ω ω

Rho
Sigma
Tau
Ypsilon

Einleitung Formale Grundlagen

VO 1 — 12

Mengen

N = {0, 1, 2, 3, . . .}
N+, Ng, Nu
A = {a, b, c}; B = {c, d};
C = {a, b, c, . . . , z}; D1, . . . , Dk
∅
A ⊆ C, A ⊂ C, A (cid:54)⊆ B
C ⊇ A
a ∈ A, a (cid:54)∈ B

A ∪ B = {a, b, c, d}, (cid:83)
A ∩ B = {c}, (cid:84)

1≤i≤k Di

C \ A = {d, . . . , z},
A \ B = {a, b}
A(cid:52) B = {a, b, d}

natürliche Zahlen, inklusive 0
positive, gerade und

ungerade natürliche Zahlen

endliche Mengen

leere Menge
A ist (echte/keine) Teilmenge
C ist Übermenge
a ist Element von A, nicht von B

1≤i≤k Di Vereinigung

Schnittmenge

„C ohne A“, „A ohne B“

Symmetrische Differenz

Einleitung Formale Grundlagen

VO 1 — 13

Logik

true, (T, (cid:62))
Symbol für „wahr“
false, (F, ⊥)
Symbol für „falsch“
x, y, x1, x2, x3, . . . Boolsche Variablen,
x → y
x ↔ y
¬x

Äquivalenz, „x = y“.

Implikation.

nehmen den Wert true oder false an

Falls x = true, dann y = true; sonst y beliebig

Falls x = true, dann y = true; sonst y = false

x ∧ y, (cid:86)
x ∨ y, (cid:87)

x ⊕ y

Negation.

false falls x = true und umgekehrt

1≤i≤k xi

Konjunktion („logisches Und“).

true nur falls x und y true

1≤i≤k xi Disjunktion („logisches Oder“).

true nur falls mindestens x oder y true

Exklusive Disjunktion („exklusives Oder“).

true nur falls genau eines von x und y true

Einleitung Formale Grundlagen

VO 1 — 14

Logik (Fortsetzung)

Belegung einer Variablen: Zuweisung eines festen Werts
(true oder false) zu einer Variablen.

Variable x: kann true oder false sein.
Belegung x(cid:48) von x ist (beispielsweise) true (=„Einsetzen“).

Formeln
A := x1 ∨ (x2 ∧ x3)
B(x) := (¬x → true)

∀x : B(x)
∃x : B(x)

C (cid:96) D
B(x) (cid:96) true

Allquantor.

Für alle mögl. Belegungen x(cid:48) von x gilt B(x(cid:48))
Existenzquantor.
Es gibt mindestens eine Belegung x(cid:48) von x,
sodass B(x(cid:48)) gilt

Deduktion. „Aus Formel C folgt Formel D“

Einleitung Formale Grundlagen

VO 1 — 15

Arten von Aussagen

(cid:73) Aussage.

Besteht aus Voraussetzungen (Grundannahmen,
Hypothesen) und der Konklusion (Folgerung,
Resultat,. . . ).

Beispiel: Sei n ≥ 8 eine Primzahl (Voraussetzung),
dann ist n ungerade (Konklusion).
(cid:73) Theorem (=Satz). Wichtige Aussage.
(cid:73) Lemma. „Kleine“ Aussage, wird i. d. R. als Hilfsmittel

benutzt, um ein Theorem beweisen zu können.

(cid:73) Beobachtung. Sehr einfache Aussage.
(cid:73) Korollar (=Folgerung). Aussage, die sich direkt aus
einer anderen bewiesenen Aussage (Theorem, Lemma,
etc.) ergibt.

Einleitung Formale Grundlagen

VO 1 — 16

Arten von Beweisen

Direkter Beweis (= deduktiver Beweis).
Kette von logischen Folgerungen, die von den
Voraussetzungen bis zur Konklusion gelangt.

Aussage. Sei n ∈ Ng, n ≥ 2. Es gilt(cid:80)n

i=1 i = n(n+1)

2

.

Beweis. Betrachte die kleinste und die größte Zahl; deren
Summe ist 1 + n. Allgemein ist die Summe aus der k-kleinsten
und der k-größten Zahl immer k + (n − k + 1) = n + 1.
Wegen n ∈ Ng ist die n
der n
k-kleinster/k-größter Zahl.
⇒ n

2 -größten Zahl. Es gibt also genau n

2 -kleinste Zahl der direkte Vorgänger

2 -mal die Paar-Summe n + 1 aufaddieren: n

2 viele Paare von

2 (n + 1).

(cid:3)

Einleitung Formale Grundlagen

VO 1 — 17

Arten von Beweisen

Indirekter Beweis (= Beweis durch Widerspruch).
Nehmen Sie an, dass die Konklusion nicht gelten würde.
Zeigen Sie, dass dies im Widerspruch zu den Voraussetzungen
steht.
Aussage. Sei n ≥ 8 eine Primzahl, dann ist n ungerade.
Beweis. Angenommen n sei gerade. Dann ist n durch 2
teilbar. Um eine Primzahl zu sein, müsste also n = 2 gelten.
Widerspruch zu n ≥ 8.

(cid:3)

Einleitung Formale Grundlagen

VO 1 — 18

Arten von Beweisen

Beweis durch Induktion.
Für Aussagen bzgl. einer Zahl, einer Menge,... (allgemein:
Halbordnung).

Induktionsanfang (IA): Zeigen Sie, dass die Aussage für
kleine Basisfälle (z. B. Zahl=1, einelementige Menge,...) gilt.
Induktionsschritt (IS): Betrachten Sie eine beliebige Zahl
(Mengengröße) X. Zeigen Sie, dass die Aussage für X gilt, falls
die Aussage für alle kleineren Zahlen (Mengen) gilt
(Induktionshypothese (IH)).

Begründungslogik: Angenommen, es gibt Zahlen (Mengen) für
die die Aussage nicht stimmt. Wähle X als die kleinste dieser
Zahlen (Mengen). Für alle kleineren Zahlen (Mengen) gilt die
Aussage also, also die IH. Der IS beweist dann die Gültigkeit
für X → Widerspruch.

Einleitung Formale Grundlagen

VO 1 — 19

Arten von Beweisen

Beweis durch Induktion.

Aussage. Sei n ∈ N+. Es gilt(cid:80)n

i=1 i = n(n+1)

2

.

Beweis.
Induktionsanfang:

Die Aussage gilt für n = 1 (cid:88)

Induktionshypothese:

Angenommen, die Aussage gilt für jedes n(cid:48) < n.

Induktionsschritt:

n(cid:88)

i=1

i =

n−1(cid:88)
(cid:18) n − 1

i + n

i=1

(n − 1)n

2

IH
=

(cid:19)

+ n =

= n ·

+ 1

2

= n · n − 1 + 2

2

= n

(n + 1)

2

. (cid:3)

Einleitung Formale Grundlagen

VO 1 — 20

Arten von Beweisen

Beweis durch Autorität.
Dem Vortragenden vorbehalten.
In Lösungen der Übungsaufgaben nicht zulässig.

Aussage. Sei z eine reelle oder komplexe Zahl. Es gilt:

(cid:16)

lim
n→∞

1 +

z
n

(cid:17)n

= ez.

Beweis. Das gilt. Glauben Sie mir. Der Beweis wäre jetzt zu
lang, kompliziert und irrelevant.

(cid:3)

Einleitung Formale Grundlagen

VO 1 — 21

Arten von Beweisen

Beweis durch Einschüchterung.

Bildquelle: xkcd.com/982

Einleitung Formale Grundlagen

Landau-Symbole: O-Notation

VO 1 — 22

Laufzeiten: O(n), O(n log n), O(n2m + m1.5),...
Deﬁnition (Groß-O-Notation). Sei f (n) : Nk → R eine
Funktion. Parameter n ist dabei ein k-stelliger Vektor.
O(f ) := { g : Nk → R | ∃c > 0,∃n0 ∈ Nk,∀n ≥ n0 : g(n) ≤ c·f (n) }

= Menge aller Funktionen die asymptotisch maximal so
schnell wachsen wie f . → Wert f (n) ist eine asymptotische
obere Schranke für g(n) für alle g ∈ O(f ).

Dies ist gleichbedeutend mit:
g ∈ O(f ) ⇐⇒ ∃c > 0,∃n0 ∈ Nk, sodass ∀n ≥ n0 : g(n) ≤ c · f (n)

In der Informatik schreiben wir (wenn auch formal fragwürdig)
i.d.R. g = O(f ) statt g ∈ O(f ).

Einleitung Formale Grundlagen

VO 1 — 23

Landau-Symbole: Untere Schranken

O-Notation gibt eine asymptotische obere Schranke für eine
Funktion an.
„Algorithmus XY hat eine Laufzeit O(n2).“
→ Er benötigt maximal quadratisch viel Zeit in der
Eingabegröße.

Analog können wir deﬁnieren:

(cid:73) Asymptotische untere Schranke Ω (griech. Omega)

„Algorithmus XY hat eine Laufzeit Ω(n2).“
→ Er benötigt mindestens quadratisch viel Zeit.

(cid:73) Asymptotisch scharfe Schranke Θ (griech. Theta)

„Algorithmus XY hat eine Laufzeit Θ(n2).“
→ Er benötigt immer quadratisch viel Zeit.
D.h. Θ(f ) = O(f ) ∩ Ω(f ); g = Θ(f ) ⇔ g = O(f ) ∧ g = Ω(f )

Einleitung Formale Grundlagen

VO 1 — 24

Landau-Symbole: Beispiel

Laufzeitschranken beim Sortieren von n Elementen.

(heterogene Daten) Ω(n log n), O(n log n) ⇒ Θ(n log n)

(cid:73) BubbleSort:

Ω(n),

O(n2) pfui...

(cid:73) InsertionSort:
(cid:73) SelectionSort:
(cid:73) MergeSort:
(cid:73) QuickSort:
(cid:73) HeapSort:

O(n2)
O(n2)

⇒ Θ(n2)

Ω(n),
Ω(n2),
Ω(n log n), O(n log n) ⇒ Θ(n log n)
Ω(n log n), O(n2)
Ω(n),

O(n log n)

Einleitung Formale Grundlagen

VO 1 — 25

Ausblick auf morgen...

(cid:73) Noam Chomsky

Linguistik

(cid:73) Formale Sprachen &

Grammatiken
→ Chomsky-Hierarchie

(cid:73) Reguläre Sprachen

