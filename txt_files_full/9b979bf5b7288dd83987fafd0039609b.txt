Algorithmen und Datenstrukturen 

 

Linienvereinfachung 

 

 

 

Martin Kada 

Universität Osnabrück 

Institut für Geoinformatik und Fernerkundung 

1 

Was bedeutet Linienvereinfachung? 

 Eine Linie besteht aus Anfangs- und Endpunkt und beliebig vielen 

Zwischenpunkten 

Zwischenpunkte 

Endpunkt 

Anfangspunkt 

 Die Linienvereinfachung entfernt nicht benötigte Zwischenpunkte 

 Algorithmen zur Linienvereinfachung unterscheiden sich (hauptsächlich) 

in den Kriterien, nach denen sie nicht benötigte Punkte identifizieren 

2 

Gründe für Linienvereinfachung 

 Datenreduktion 

 Verringerung des Speicherbedarfs 

 Beschleunigter Abruf und Übertragung  
 Schnellere Prozessierung von Vektordaten 

 Verwaltung, Analyse, Präsentation 

 Teil der kartographischen Generalisierung 

Datenreduktion laut 

(Jenks, 1989)* bis zu 75% 

 Übersichtliche Darstellung in verschiedenen Maßstäben 
 Analyse von Daten aus unterschiedlichen Maßstäben 

? 

*Jenks, G.F., 1989. Geographic logic in line generalisation. 

In: Cartographica, Vol. 26 (1), pp. 27-42. 

Bspw. Darstellung 
einer Passstraße 

3 

Gründe für Linienvereinfachung 

 Werkzeug zur Datenerfassung  

und Datenverarbeitung 
 Verarbeitung von GPS-Tracks 
 Auswertung von Luft- und  

Satellitenbildern, sowie  
Laserdaten 

 Digitalisieren von vorhandenem 

Kartenmaterial 

GPS-Track mit  
ca. 40.000 Punkten 

Linienvereinfachung als Zwischenschritt 
bei der automatischen Generierung von 
Gebäudegrundrissen aus Laserdaten 

4 

Iterative Funktionsweise 

1. Linie wird Punkt für Punkt durchlaufen. Für jeden Punkt wird 
entschieden, ob dieser Punkt oder nachfolgende Punkte zur 
Vereinfachung der Linie gelöscht werden können 

for(Point p : l) 
{ 
  Erfüllt Punkt p oder die folgenden Punkte  
    eine bestimmte geometrische Bedingung? 
 
  Wenn nein, dann lösche den Punkt 
} 

5 

Rekursive Funktionsweise 

2. Es wird der „wichtigste“ Punkt in der Linie gesucht und die Linie an 

diesem Punkt in zwei Teilsegmente geteilt. Beide Teile werden 
unabhängig voneinander vereinfacht. (Rekursion) 

LineSimplification(Line l = {P1,P2,…,Pn}) 
{ 
  Suche in l den wichtigsten Punkt Pk 
   
  LineSimplification(Line{P1,…,Pk}) 
  LineSimplification(Line{Pk,…,Pn}) 
} 

6 

Klassen von Algorithmen 

 Betrachtung unabhängiger Punkte 

 Die Entscheidung, ob ein Punkt in die neue Linie übertragen oder aus 

der alten Linie gelöscht wird, geschieht nur durch Betrachtung des 
Punkts selbst und nicht in Abhängigkeit seiner Nachbarpunkte 

 Lokale Prozessierung 

 

 

 Erweiterte lokale Prozessierung 

 

 
 

 Erweiterte lokale Prozessierung mit zusätzlichen Einschränkungen 

 

 

 Globale Prozessierung 

7 

 n-ter Punkt Verfahren 

 Linienpunkte werden sequentiell betrachtet, wobei nur jeder n-te Punkt 

beibehalten wird. Die anderen Punkte werden entfernt. 

n-ter Punkt 

 

 

 

 

 

 

 

n=4 

n=2 

n=3 

8 

Zufällige Punktwahl 

 Linienpunkte werden in Abschnitte von n aufeinanderfolgenden 

Punkten gruppiert und aus jeder Gruppe ein Punkt zufällig für die 
neue Linie ausgewählt 

n=2 

n=4 

 Bemerkung: Ergebnis bei jedem Durchlauf anders (trotz gleichen n) 

9 

Klassen von Algorithmen 

 Betrachtung unabhängiger Punkte 

 Die Entscheidung, ob ein Punkt in die neue Linie übertragen oder aus 

der alten Linie gelöscht wird, geschieht nur durch Betrachtung des 
Punkts selbst und nicht in Abhängigkeit seiner Nachbarpunkte 

 Lokale Prozessierung 

 Beziehen die zwei oder drei unmittelbar benachbarten Punkte mit in die 

Entscheidung mit ein, ob ein Punkt behalten oder entfernt wird 

 Erweiterte lokale Prozessierung 

 

 
 

 Erweiterte lokale Prozessierung mit zusätzlichen Einschränkungen 

 

 

 Globale Prozessierung 

10 

Distanzverfahren 

 Die Linienpunkte werden sequentiell betrachtet, wobei in jedem 

Schritt alle Nachfolgerpunkte entfernt werden, deren Distanzen zum 
aktuellen Punkt unter einem definierten Schwellwert liegen 

11 

Pfeilhöhenverfahren 

 Es werden sequentiell jeweils drei aufeinanderfolgende Punkte der 

Linie betrachtet, wobei der erste und dritte Punkt eine Basislinie 
aufspannen. Der mittlere Punkt wird gelöscht, wenn sein 
senkrechter Abstand zur Linie einen Schwellwert unterschreitet 

 Das nächste Punkttripel beginnt … 

 … am jeweils dritten Punkt des vorherigen Tripels (Variante 1) 

  Bemerkung: entfernt maximal jeden zweiten Punkt ( → Mehrfachausführung, 

                    wenn eine höhere Punktreduktion gewünscht ist) 

 … am nächsten Punkt (Variante 2) 

12 

Winkelverfahren 

 Es werden sequentiell jeweils drei aufeinanderfolgende Punkte der 
Linie betrachtet. Der mittlere Punkt wird gelöscht, wenn der Winkel 
zwischen der Geraden vom ersten zum zweiten Punkt und der 
Geraden vom ersten zum dritten Punkt einen Winkelschwellwert 
unterschreitet 

Bemerkung:  Pfeilhöhe und Winkel unterliegen unterschiedlichen  

Veränderungen bzgl. der Position des mittleren Punkts 

 

13 

Jenks-Algorithmus 

 Die Linienpunkte werden sequentiell betrachtet 

1.

Ist die Distanz zwischen zwei aufeinanderfolgenden Punkten kleiner als 
ein Schwellwert mind1 → zweiter Punkt entfernen 

2.

Ist die Distanz zwischen einem Punkt und dem übernächsten Punkt 
kleiner als Schwellwert mind2 → dazwischenliegender Punkt entfernen 

3.

Ist der Winkel zwischen der Linie vom zweiten zum ersten Punkt und 
der Linie vom zweiten zum dritten Punkt größer als ein Winkelschwell-
wert maxw → zweiter Punkt entfernen 
 

 

alternativer Schwellwertvergleich minw 

14 

Klassen von Algorithmen 

 Betrachtung unabhängiger Punkte 

 Die Entscheidung, ob ein Punkt in die neue Linie übertragen oder aus 

der alten Linie gelöscht wird, geschieht nur durch Betrachtung des 
Punkts selbst und nicht in Abhängigkeit seiner Nachbarpunkte 

 Lokale Prozessierung 

 Beziehen die zwei oder drei unmittelbar benachbarten Punkte mit in die 

Entscheidung mit ein, ob ein Punkt behalten oder entfernt wird 

 Erweiterte lokale Prozessierung 

 Es wird eine Reihe aufeinanderfolgender Punkte betrachtet, um zu 

entscheiden, ob der Abschnitt durch eine direkte Verbindung des ersten 
zum letzten Punkts ersetzt werden kann 

 Erweiterte lokale Prozessierung mit zusätzlichen Einschränkungen 

 

 

 Globale Prozessierung 

15 

Reumann-Witkam-Algorithmus 

 Die Linienpunkte werden sequentiell durchlaufen, wobei in jedem 

Schritt ein Toleranzband parallel zur Verbindung vom aktuellen 
Punkt zum folgenden Punkt gebildet wird. Der erste und letzte Punkt 
innerhalb des Bandes bleiben erhalten und bilden das neue Linien- 
segment. Alle Punkte dazwischen werden entfernt. 

Bemerkung:  Bei geringem Punktabstand haben schon kleinste Ungenauigkeiten in der 

Position große Auswirkungen auf die Richtung des Toleranzbandes 

16 

Sleeve-Fitting-Algorithmus 

 Ähnlich wie Reumann-Witkam, nur wird anstelle des Toleranz-

bandes ein rechteckiger Schlauch (engl. sleeve) zwischen dem 
aktuellen Punkt Pi und einem Endpunkt Pi+k aufgespannt,  
so dass k maximal wird und alle dazwischenliegenden Punkte  
{Pi+1, Pi+2, …, Pi+k-1} sich innerhalb des Schlauchs befinden 

Pi 

Pi 

Gültiger Schlauch von Pi bis Pi+1 

Gültiger Schlauch von Pi bis Pi+2 

Pi 

Pi 

Gültiger Schlauch von Pi bis Pi+3 

Ungültiger Schlauch von Pi bis Pi+4 

17 

Klassen von Algorithmen 

 Betrachtung unabhängiger Punkte 

 Die Entscheidung, ob ein Punkt in die neue Linie übertragen oder aus 

der alten Linie gelöscht wird, geschieht nur durch Betrachtung des 
Punkts selbst und nicht in Abhängigkeit seiner Nachbarpunkte 

 Lokale Prozessierung 

 Beziehen die zwei oder drei unmittelbar benachbarten Punkte mit in die 

Entscheidung mit ein, ob ein Punkt behalten oder entfernt wird 

 Erweiterte lokale Prozessierung 

 Es wird eine Reihe aufeinanderfolgender Punkte betrachtet, um zu 

entscheiden, ob der Abschnitt durch eine direkte Verbindung des ersten 
zum letzten Punkts ersetzt werden kann 

 Erweiterte lokale Prozessierung mit zusätzlichen Einschränkungen 

 Die betrachteten Abschnitte werden eingeschränkt oder es müssen 

zusätzliche Bedingungen erfüllt sein 

 Globale Prozessierung 

18 

Opheim-Algorithmus 

 Das Toleranzband von Reumann-Witkam  

wird um eine minimale und maximale  
Distanz ergänzt 

Opheim 
Suchbereich 

 Alle Punkte, deren Abstand zum aktuellen Punkt kleiner als die 

minimale Distanz ist, werden gelöscht (ähnlich Distanzverfahren) 

 Alle Punkte, die sich innerhalb des Toleranzbandes befinden und deren 

Abstand zum aktuellen Punkt kleiner als die maximale Distanz sind, 
werden (bis auf den letzten Punkt) gelöscht 

Toleranzband 

minimale  
Distanz 

   maximale  
Distanz 

19 

Lang-Algorithmus 

 Beginnend mit n Punkten wird der längste Abschnitt aufeinander- 

folgender Punkte gesucht, so dass gilt: 
 Alle Punkte haben einen senkrechten Abstand zu der Geraden, die 

zwischen dem ersten und letzten Punkt verläuft, kleiner einem 
Schwellwert 

 Das gefundene Linienstück wird durch ein Liniensegment ersetzt, 

welches vom ersten zum letzten Punkt des Abschnitts verläuft. Der 
letzte Punkt ist der erste Punkt des nächsten Abschnitts 

n=5 

Pi 

Pi+6 

Pi 

Pi+6 

Ungültiges Liniensegment, da 

senkrechter Abstand Pi+3 > Schwellwert 

Entfernung von Punkt Pi+4 resultiert 

in einem gültigen Liniensegment 

20 

Klassen von Algorithmen 

 Betrachtung unabhängiger Punkte 

 Die Entscheidung, ob ein Punkt in die neue Linie übertragen oder aus 

der alten Linie gelöscht wird, geschieht nur durch Betrachtung des 
Punkts selbst und nicht in Abhängigkeit seiner Nachbarpunkte 

 Lokale Prozessierung 

 Beziehen die zwei oder drei unmittelbar benachbarten Punkte mit in die 

Entscheidung mit ein, ob ein Punkt behalten oder entfernt wird 

 Erweiterte lokale Prozessierung 

 Es wird eine Reihe aufeinanderfolgender Punkte betrachtet, um zu 

entscheiden, ob der Abschnitt durch eine direkte Verbindung des ersten 
zum letzten Punkts ersetzt werden kann 

 Erweiterte lokale Prozessierung mit zusätzlichen Einschränkungen 

 Die betrachteten Abschnitte werden eingeschränkt oder es müssen 

zusätzliche Bedingungen erfüllt sein 

 Globale Prozessierung 

 Betrachten die Linie in ihrer Gesamtheit 

21 

Douglas-Peucker-Algorithmus 

 Rekursiver Algorithmus 

 In jedem Rekursionsschritt wird eine Basislinie vom ersten zum letzten 
Punkt gebildet und dann der Punkt Pk mit dem maximalen senkrechten 
Abstand zu dieser Linie ermittelt 

1.

Ist der Abstand kleiner als der Schwellwert, so wird die Linie durch die 
Basislinie ersetzt 

2. Ansonsten wird der Algorithmus rekursiv für die zwei Linienabschnitte 

vom Startknoten P1 bis Pk und von Pk bis zum Endknoten Pn ausgeführt 

 

P1 

Pk 

Pn 

22 

Douglas-Peucker-Algorithmus 

Beide Linienteile werden unabhängig voneinander bearbeitet 

Pk 

P1 

Pk 

Pn 

P1 

Pn 

P1 

Pn 

P1 

Pn 

Pn 

P1 

Am Ende der Rekursion verbleiben nur die Punkte der vereinfachten Linie 

Pn 

P1 

23 

Douglas-Peucker-Algorithmus 

1. Teilung der Linie in zwei Teillinien 

2. Teilung der zwei Linien in vier Teillinien 

3. Keine Teilung mehr notwendig, Zwischenpunkte löschen 

Achtung:  die Rekursion verarbeitet die Teilstücke in einer Reihenfolge, 

die der Tiefensuche in einem Binärbaum ähnelt 

24 

Douglas-Peucker-Algorithmus 

void DouglasPeucker(Linie {P1,P2,…,Pn}) 
{ 
  finde Punkt Pk mit maximalem senkrechten 
    Abstand zur Basislinie(P1,Pn) 
 
  if (Senkrechter Abstand > epsilon) 
  { 
    DouglasPeucker (Linie {P1,…,Pk}); 
    DouglasPeucker (Linie {Pk,…,Pn}); 
  } 
  else 
    Lösche alle Punkte P2,…,Pn-1 
} 

 Der Funktion „DouglasPeucker“ wird eine Referenz auf das Linienobjekt 

übergegeben, so dass diese das Teilstück direkt verändern kann 

 Alternativ könnte die Funktion das vereinfachte Linienstück zurückgeben 

und die aufrufende Funktion fügt die Teile anschließend zusammen 

25 

Mögliche Fehler 

 Linienvereinfachung entfernt nicht benötigte Zwischenpunkte ohne 

die Position der verbleibenden Punkte zu verändern 
 Keine geometrischer Fehler bei den verbleibenden Punkte 
 Aber geometrische Fehler wenn man den Verlauf der Linie im Bezug zu 

den Originalpunkten vergleicht 

 Topologische Fehler 

 Sich kreuzende Linien, übereinstimmende Linienabschnitte und  

auf Nulllänge geschrumpfte Liniensegmente 

 

 Bei topologischen Fehlern kann die Linie nochmals mit einem 

geringeren Schwellwert vereinfacht werden, bis kein Fehler mehr 
auftritt 

 

 Alternative wäre die Verdrängung 

 Mittels Snakes, Beams und Ausgleichung nach kleinsten Quadraten 

26 

BendSimplification 

 Liniengeneralisierung nach Wang & Müller* 

 Zentrale Idee: 

Die Form einer Linie ist maßgeblich durch deren Bögen bestimmt. Zum 
Zweck der Liniengeneralisierung sind Maßnahmen wie Elimination, 
Kombination und Betonung schrittweise auf die Bögen anzuwenden, 
wobei gleichzeitig die allgemeine Form der Linien zu bewahren ist. 

 

 Implementiert in ESRI ArcInfo 

 

 Option BEND_SIMPLIFY 

 

*Wang, Z., Müller, J.-C., 1998. Line Generalization Based on Analysis of Shape Characteristics. 

In: Cartography and Geographic Information Systems, Vol. 25 (1), pp. 3-15. 

27 

BendSimplification 

„Individuals seem to judge the shape of the line on two criteria:  

the directionality of the line and the basic sinuosity of the line.” 
(McMaster, 1993)* 

 (Grundlegende) Regeln für die Liniengeneralisierung  

(laut Wang und Müller, 1998): 

1. Unbedeutende Bögen und Ungleichmäßigkeiten sollten entfernt 

werden 

2. Zwei Bögen, die ähnlich sind, nebeneinander liegen und deren 

Ausmaße unter einem gegebenen Schwellwert sind, sollten zu einem 
Bogen zusammengefasst werden 

3. Nicht-gerade Linien sollten nicht durch geometrisch gerade Linien 

ersetzt werden 

4. Ein isolierter Bogen, dessen Ausmaß nahe am oben genannten 

Schwellwert liegt, sollte betont werden 

*McMaster, R., 1993. Knowledge Acquisition for Cartographic Generalization: Experimental Methods. 

In: Müller, J.-C., J.P. Lagrange, and Weibel, R., (eds), GIS and Generalization: Methodological and 
Practical Issues. Taylor & Francis, London, pp. 161-179. 

28 

BendSimplification 

29 

Definition des Bogens 

 Ein Bogen ist ein Linienabschnitt von aufeinanderfolgenden Punkten, 

an denen die Beugungswinkel alle dieselbe Richtung aufweisen. 
 Start- und Endpunkt haben genau die entgegengesetzte Richtung 

- 

- 

- 

+ 

- 

+ 

- 

+ 

- 

+ 

 Eine Linie kann als eine Folge von Bögen betrachtet werden 
 Positiv und negativ verlaufende Bögen wechseln sich ab 

30 

 Basislinie: direkte Verbindung vom Anfang zum Ende des Bogens 

Basislinie 

 Bei geringer Biegung an den Start- und Endknoten wird die 

Basislinie nach außen bewegt, solange wie sich dadurch die Länge 
der Basislinie verkürzt (oder die Biegung zu stark wird) 

31 

Basislinie 

 Kreuzt die Basislinie die zu vereinfachende Linie, so wird der 

näherliegende Basislinienpunkt solange nach außen bewegt, bis 
keine Überschneidungen mehr vorkommen 
 Auch hier wird versucht eine möglichst kurze Basislinie zu erhalten 

32 

Bewertung von Bögen 

 Die Bedeutung eines einzelnen Bogens ist abhängig von: 

1. Größe berechnet als Polygonfläche zwischen Bogen und Basislinie 

Kleiner Bogen 

Kleiner Bogen 

Großer Bogen 

2. Kompaktheit der Form (im Vergleich zum Kreis als kompakteste Form)  

Hohe Kompaktheit 

Geringe Kompaktheit 

Mittlere Kompaktheit 

33 

Bewertung von Bögen 

 Kompaktheit ist das Verhältnis von 

Fläche des Polygons zwischen Bogen und Grundlinie zu 
Fläche des Kreises mit demselben Umfang wie das Polygon 

Beispiele für die Kompaktheit verschiedenen Bogenformen: 

1,0 

0,75 

0,7 

0,7 

0,54 

 Bei gleicher Größe sollen Bögen mit hoher Kompaktheit bei der 

Linienvereinfachung als erstes eliminiert werden, d.h. die Bedeutung 
muss sich invers zur Kompaktheit verhalten 

34 

24UFtKompaktheiBewertung von Bögen 

 Durch Kombination von Größe und Kompaktheit erhält man eine 

angepasste Größe 
 Kreisförmige Bögen kommen in der Realität nicht so häufig vor.  

Daher werden halbkreisförmige Bögen als Standard angenommen und 
die Kompaktheit entsprechend mit dem Faktor 0,75 angepasst 

 Kompaktheit = 0,75 → Bedeutung des Bogens bleibt gleich 
 Kompaktheit > 0,75 → Bedeutung des Bogens verringert sich 
 Kompaktheit < 0,75 → Bedeutung des Bogens vergrößert sich 

 Flache Bögen haben eine geringe Kompaktheit und werden aufgrund 

ihrer angepassten Größe den Schwellwert zur Vereinfachung 
überschreiten (Regel 3 zur Liniengeneralisierung) 

35 

tKompaktheiFGrößeeAngepasst75,0Bewertung von Bögen 

 Für Generalisierungsoperatoren wie Betonung und Verschmelzung 
wird der Kontext der Bögen benötigt, d.h. deren Form im Vergleich 
mit benachbarten Bögen 
 Isolierte Bögen weisen lange, abflachende Linienfortsätze auf, welche 

durch die Betrachtung der mittleren Krümmung identifizierbar sind 

 Ähnlichkeit von Bögen aufgrund der Euklidischen Distanz zwischen  

3D-Merkmalsvektoren bestehend aus Größe, Kompaktheit und Länge 
der Basislinie 

 
t
i

 Werte der einzelnen Dimensionen 

werden durch Division mit dem 
jeweiligen Mittelwert normalisiert 

e
h

t
k
a
p
m
o
K

Größe 

36 

Operatoren 

 Als Generalisierungsparameter gibt der Benutzer den minimalen 

Durchmesser für einen halbkreisförmigen Bogen an 
 Fläche des Halbkreises ist Schwellwert des Algorithmus 

Benutzer 

Algorithmus 

 Bogenelimination 

 Lokal minimale Bögen sind kleiner als ihre beiden Nachbarbögen 

 Die beiden Bögen am Anfang und Ende einer Linie sind immer 

größer als ihre Nachbarbögen (und bleiben dadurch erhalten) 

 Iterative Elimination der lokal minimalen Bögen, deren Polygonflächen 

kleiner dem Schwellwert sind 

 Bei der Elimination wird ein Bogen durch seine Basislinie ersetzt 

 Verfahren endet, wenn alle Bögen größer dem Schwellwert sind 

37 

Beispiel für Bogenelimination 

Schwellwert 

Operatoren 

Originallinie 

1. Iteration 

2. Iteration 

Ergebnis 

38 

 Kombination von Bögen 

 Die Spitze eines Bogens ist der Knoten, dessen aufsummierte Distanz 

zu seinen beiden Basispunkten am größten ist 

Operatoren 

 Bei der Kombination werden zwei benachbarte Bögen mit ähnlichen 

geometrischen Attributen zu einem Bogen verschmolzen 

 Die Spitze des neuen Bogens liegt auf der Verbindungsgeraden 

zwischen der Spitze des mittleren (negativen) Bogens und der Mitte 
der Verbindung der beiden alten Spitzen, wobei die Position leicht 
überhöht wird. Die Liniensegmente links und rechts der alten 
Spitzen werden auf die neue Spitze gezogen. 

A 

C 

B 

39 

 Betonung von Bögen 

 Vermeidung von räumlichen Konflikten bei der Maßstabsreduktion von 

Karten, sowie zur Hervorhebung wichtiger (Linien-) Merkmale 

Operatoren 

1. Als Zentrum für die Betonung dient der 

Mittelpunkt der Basislinie 

2. Die Bogenpunkte werden gemäß ihres  

Abstands weg vom Zentrum bewegt 

 Distanzberechnung mit Hilfe der  

(Gauß‘schen) Normalverteilung 

Original 

Ergebnis 

 Durch die ungleichmäßige Verdrängung können sich Bögen verformen 

 Flache Bögen werden „höher“, schmalen Bögen breiter 

40 

Ablaufschema 

Erkennung und 

Bewertung von Bögen 

ja 

Stopp 

Alle Bögen 

> ε ? 

nein 

Isolierter 
Bogen? 

nein 

Ähnliche 
Bögen? 

nein 

LMB* < ε ? 

nein 

ja 

ja 

ja 

Betonung 

Kombination 

Elimination 

nein 

Letzter 
Bogen? 

ja 

ε → Schwellwert 
LMB → lokal minimaler Bogen 

41 

Vergleich 

POINT_REMOVE 

BEND_SIMPLIFY 

Bilder aus der ArcGIS Dokumentation 

42 

