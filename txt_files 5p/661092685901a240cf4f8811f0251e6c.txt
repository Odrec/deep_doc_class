MatLab in Cognitive Science WS14/15

Homework #11

Please upload your homework on Stud.IP until Friday Feb 13th The sheet needs to contain
your name(s), matriculation number(s) as well as your MatLab code and all required labeled ﬁg-
ures. If you encounter problems, don’t hesitate to write an email to kahartma@uos.de or ameisener@uos.de.
Be sure to include [matlab] in the subject.

Today we are going to learn how to use the PsychToolbox (http://psychtoolbox.org/) to pro-

gram and control experiments.
We want to implement a simple version of the famous posner-cueing task. Before we start, a
simple and short introduction how to use Psychtoolbox.
The usage of this toolbox is a little bit different than other toolboxes. There are some main functions
e.g. screen. These functions have many sub-functions. E.g. screen(’OpenWindow’), screen(’Flip’),
screen(’DrawText’)...
To get an overview over a function, simply write »screen. To get extended help to sub-functions
write »screen(’Flip?’). In the current geruest, you ﬁnd some important deﬁnition of sub-functions
and functions of Psychtoolbox we will use in this experiment.

Short description of the posner cuing task:
• The subject has to ﬁxate the center of the screen
• For the cue-condition a cue appears left or right from ﬁxation cross
• After that the target appears on the left or right side

– Either without cue
– On the same side as the cue
– On the opposing side for an incorrect cue

• The time the subject takes to press either left or right is measures

In the posner cueing task it can often be observed that subjects react faster with a congruent cue,
than an incogruent or absent cue. We want to replicate these results.

1 Task (basic): Posner Cuing Task

Implement the posner cueing task. Use (Ntrials = 120). Use 2
congruent cue.

5 in-

5 no-cue, 2

5 congruent cue and 1

1. Generel remarks to using PsychToolbox:

1

student from Tübingen, nevertheless it is quite good!

• The software is not a commercial product, it is basically written by a single graduate
• If you open up a screen, you will not see any other windows again before you close it with the
command sca (screen close all). In order to do so you have to cancel the program (strg+c on
windows) and blindly type in sca, maybe you have to switch to the matlab window with alt+tab
before. You won’t have this problem if you run the screen in a window.

2. Open up a Screen

Screen('Preference','SkipSyncTests',1)

{[}win rect{]} = Screen('OpenWindow',ScreenNumber,Color,Rect);

% ScreenNumber is most probably 0,
% but could also be 1 for multi display setups. Color can be 0 or a RGB triplet.
% If rect is empty ([]) fullscreen is used.
% We use: [10,10,500,500], that means a window from
% pixel left:10|top:10 to right:500|bottom:500 (to remember the order of
% rects: LeTteRBox, left top right bottom)

(a) Draw some introduction text:

Screen('DrawText',win,text)

% text is a string-variable, you can use \n to get newline. Win
% is the screen you opened before. You could use multiple screens
% to show what's going on to the experimenter.
% Beware that drawing on a screen costs time, so if you have to draw multiple
% screens, this could alter your timing!

{[}~,OnsetTime{]} = Screen('Flip',win)

% When using screens, you always
% draw things in a "background"
% layer first, then you flip this on to the screen. You can prepare
% those background-layers
% in advanced in order to have fast drawing times. OnsetTime is an
% estimate when the image is completly visible on the monitor

i. Begin the trial loop

A. To decide which condition we use in a given trial, use the code implemented in

the geruest.m on Stud.IP

B. We have to deﬁne at which positions the target and the cue should occur in this
trial. We have to deﬁne a rect where PsychToolbox should draw cue and target.
e.g. variables cueDest and targetDest. The appropriate target/cue locations have
been implement in destLeft and destRight in the beginning of the document.

2

C. Draw a ﬁxation cross

One way to do it is to draw two lines (Screen(’DrawLine’)). Another way is
to use a ’+’ glyph with Screen(’DrawText’). You can also draw two rectangles
(Screen(’FillRect’)).

D. Wait for 0.5 secs using a empty while loop and the combination of GetSecs and

the ﬂip onset (see above).

E. Draw the cue (if any) in cue_dest. The cue should be round (and colored if you
like): use Screen(’FillOval’) .Keep in mind that you have to redraw the ﬁxation
cross!

F. Wait for 0.5 secs, as above.
G. Draw only the ﬁxation cross to "delete" the cue
H. Wait for 0.2 secs
I. Draw the target in the rectangle deﬁned by targetDest use Screen(’FillRect’) and

wait for an answer:

J. Use [secs, keyCode, ~]=KbPressWait to get at which time (secs) which key (key-
Code) was pressed. Check if ﬁnd(keyCode)1 matches either KbName(’LeftArrow’)
or KbName(’RightArrow’).
We use the difference between secs and the onset-time of the target (screen ﬂip)
as reaction time.

K. We want to save the responses in a struct.

• Save the answer (either left,0 or right,1) in resp.keyPress(t)
• Save the reactiontime in resp.rt(t)
• Save the location in resp.loc(t)
• Save the condition in resp.cond(t)

2 Task (experiment): Gather data from an innocent victim. In-
struct it to answer as fast and accurately as possible.
• Be sure to save the resulting variables in a .mat ﬁle structure as discribed before, so

you do not loose them.

i. Analyze the data.

A. Only use trials with a correct answer (see 2.i J). Plot the mean response times for
the three conditions. Use a diagram style you ﬁnd most appropriate to present
the whole data at once.

B. Compute the correlation coefﬁcient & p-values with corrcoef between reac-
tion times and locations. Do the same for reaction time and conditions. Com-
ment if there is a signiﬁcant correlation.

1keyCode is a boolean over all possible keypresses, that’s why we need to ﬁnd the number of the active key.

3

