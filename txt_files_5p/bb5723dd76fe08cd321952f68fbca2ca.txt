Foliensatz Nr. 6 (26.04.16)

3  Kontrollflussorientierter Test
Inhalt
3.1  Grundlagen
3.2  Anweisungsüberdeckungstest C0
3.3  Zweigüberdeckungstest C1
3.4  Pfadüberdeckungstest C2, C2a
3.5  Techniken zum Test von Schleifen C2b, C2c
3.6  Bedingungsüberdeckungstest C3
3.7  LCSAJ-Test
3.8  McCabe-Überdeckung
3.9  Zusammenfassung

dynamisch

Prüftechnik

statisch

funktions-
orientiert

struktur-
orientiert

diversifizierend weitere

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 1

Software-Qualität, Sommersemester 16

datenfluss-
orientiert

kontrollfluss-
orientiert

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3

(cid:1) Alternative Namen: 

Condition coverage test (engl.)
C3

(cid:1) Beachtet die logische Struktur von Entscheidungen

(s. Liggesmeyer)

Komplexe Entscheidung / Bedingung: mit 
untergeordneten Teilentscheidungen

Atomare Entscheidung / Bedingung

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 2

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3

(s. Liggesmeyer)

Maskierung durch 
FALSE in einer UND-
Verknüpfung

Maskierung durch 
TRUE in einer ODER-
Verknüpfung

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 3

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3

(cid:1) Verschiedene Ausprägungen zur Berücksichtigung von 

Entscheidungsstrukturen:

- Einfacher Bedingungsüberdeckungstest (Simple condition coverage 

test): C3a

- Bedingungs-/Entscheidungsüberdeckungstest (Condition / decision 

coverage test)

- Minimaler Mehrfach-Bedingungsüberdeckungstest (Minimal multiple 

condition coverage test): C3c

- Modifizierter Bedingungs-/Entscheidungsüberdeckungstest (Modified 

condition / decision coverage test)

- Mehrfach-Bedingungsüberdeckungstest (Multiple condition coverage 

test): C3b

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 4

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Einfacher Bedingungsüberdeckungstest

(cid:1) Beispiel: 

Wahrheits-
werte-
kombinationen 
für 

(( A || B ) && ( C || D ))

- vollständige Evaluation
- 24 Kombinationen
- Test mit Testfall 6 und 11

⇒ einfacher 

Bedingungsüberdeckungstest

⇒ keine Zweigüberdeckung

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

w

w

A B C D A||B C||D (A||B) && (C||D)
f
f
f
f
f
f
f
f
w
w
w
w
w
w
w
w

f
f
f
f
w
w
w
w
f
f
f
f
w
w
w
w

f
f
w
w
f
f
w
w
f
f
w
w
f
f
w
w

f
w
f
w
f
w
f
w
f
w
f
w
f
w
f
w

w

w

w

w

Folie 5

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Einfacher Bedingungsüberdeckungstest

(cid:1) Beispiel: Wahrheitswertekombinationen für 

(( A || B ) && ( C || D ))

- unvollständige Evaluation

Testfälle
1, 2, 3, 4

5
6
7, 8
9, 13
10, 14

11, 12, 15, 16

I
II
III
IV
V
VI
VII

A B C D A||B C||D (A||B) && (C||D)
f
f
f
f
w
w
w

f
f
w
w
f
w
w

-
f
w
w
f
w
w

f
w
w
w
w
w
w

f
w
w
w
-
-
-

-
f
f
w
f
f
w

-
f
w
-
f
w
-

genügen 
nicht

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 6

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Einfacher Bedingungsüberdeckungstest

(cid:1) Test aller atomaren Teilentscheidungen gegen TRUE und FALSE

Subsumationsbeziehungen
(s. Liggesmeyer)

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 7

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Bedingungs- / Entscheidungsüberdeckungstest 
(engl. Condition/decision coverage)

(cid:1) Bedingungsüberdeckung + vollständige Zweigüberdeckung

Einfach: einfacher 

Bedingungsüberdeckungstest 
mit unvollständiger Evaluation

Spezielle Berücksichtigung 

bei: einfachem 

Bedingungsüberdeckungstest 
mit vollständiger Evaluation

(cid:1) Testfälle, so dass 

- alle atomaren Teilentscheidungen
- Gesamtentscheidungen

gegen TRUE und FALSE geprüft werden

(cid:1) Kein Test zusammengesetzter Teilentscheidungen unterhalb der 

Gesamtentscheidung

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 8

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Bedingungs- / Entscheidungsüberdeckungstest

(cid:1) Beispiel

Testfälle 5 und 12 erreichen eine 
vollständige Bedingungs- / 
Entscheidungsüberdeckung

keine Überdeckung der 
Teilentscheidung

Zweigüberdeckung
Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

w

f

A B C D A||B C||D (A||B) && (C||D)
f
f
f
f
f
f
f
f
w
w
w
w
w
w
w
w

f
f
f
f
w
w
w
w
f
f
f
f
w
w
w
w

f
f
w
w
f
f
w
w
f
f
w
w
f
f
w
w

f
w
f
w
f
w
f
w
f
w
f
w
f
w
f
w

w

w

f

w

Folie 9

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Minimaler Mehrfach-Bedingungsüberdeckungstest
(cid:1) Testfälle, so dass 

- alle atomaren Teilentscheidungen
- Gesamtentscheidungen
- alle zusammengesetzten Teilentscheidungen

gegen TRUE und FALSE geprüft werden

(cid:1) Bessere Berücksichtigung der (hierarchischen) Struktur von 

Entscheidungen
(Subsumationsbeziehungen s. Liggesmeyer)

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 10

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Minimaler Mehrfach-Bedingungsüberdeckungstest

(cid:1) Beispiel (mit vollständiger 

Evaluation von 
Teilentscheidungen)

- Testfälle 1 und 16 erfüllen 

die Testanforderungen
- Sie prüfen die logische 

Entscheidungsstruktur aber 
nicht sinnvoll: 
Fehler ((A && B) || (C && C)) 
würde nicht erkannt werden

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

f

f

f

A B C D A||B C||D (A||B) && (C||D)
f
f
f
f
f
f
f
f
w
w
w
w
w
w
w
w

f
f
f
f
w
w
w
w
f
f
f
f
w
w
w
w

f
f
w
w
f
f
w
w
f
f
w
w
f
f
w
w

f
w
f
w
f
w
f
w
f
w
f
w
f
w
f
w

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 11

Software-Qualität, Sommersemester 16

w

w

w

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Minimaler Mehrfach-Bedingungsüberdeckungstest

(cid:1) Beispiel (mit unvollständiger Prüfung von Teilentscheidungen)

Testfälle
1, 2, 3, 4

5
6
7, 8
9, 13
10, 14

11, 12, 15, 16

I
II
III
IV
V
VI
VII

A B C D A||B C||D (A||B) && (C||D)
f
f
f
f
w
w
w

-
f
w
w
f
w
w

f
f
w
w
f
w
w

f
w
w
w
w
w
w

f
w
w
w
-
-
-

-
f
f
w
f
f
w

-
f
w
-
f
w
-

Im Allgemeinen gilt: mit unvollständiger Evaluation wird eine 
bessere Leistungsfähigkeit erreicht
Grund: mehr Testfälle notwendig + Testfälle sind fehlerintensiver

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 12

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Minimaler Mehrfach-Bedingungsüberdeckungstest

(cid:1) Was ist, wenn für eine Teilenscheidung keine Testfälle erzeugt 

werden können?

Invariante Teilentscheidung

(cid:1) Beispiel:

if (x > 5) {

if ((x < 2) || (x > 6) && (x < 9)) { … }

} …

Invariante Teilentscheidung (Wert ist immer: FALSE)

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 13

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Modifizierter Bedingungs-/Entscheidungsüberdeckungstest

(cid:1) Wie Bedingungs-/Entscheidungsüberdeckungstest aber mit 

zusätzlicher Anforderung

- Überdeckung: alle atomaren Entscheidungen + Gesamtentscheidung

- zusätzlich: 

Testfälle müssen untereinander unabhängig bezüglich atomarer 
Teilentscheidung und Wahrheitswert der Gesamtentscheidung sein

⇒ Anzahl erforderlicher Testfälle ist linear zur Anzahl der atomaren  

Teilentscheidungen

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 14

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Modifizierter Bedingungs-/Entscheidungsüberdeckungstest
(cid:1) Beispiel 

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

f
f
f
f
w
w
w
w
f
f
f
f
w
w
w
w

f
f
w
w
f
f
w
w
f
f
w
w
f
f
w
w

f
w
f
w
f
w
f
w
f
w
f
w
f
w
f
w

(mit vollständiger 
Evaluation von 
Entscheidungen)

B
D

A

C

A B C D A||B C||D (A||B) && (C||D)
f
f
f
f
f
f
f
f
w
w
w
w
w
w
w
w

f
w
f
w
f
w
w
w
f
w
w
w
f
w
w
w

f
f
f
f
w
w
w
w
w
w
w
w
w
w
w
w

f
f
f
f
f
w
w
w
f
w
w
w
f
w
w
w

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 15

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Modifizierter Bedingungs-/Entscheidungsüberdeckungstest

(cid:1) Beispiel (mit unvollständiger Evaluation von Entscheidungen)

Testfallpaar für die 
jeweilige atomare 
Entscheidung:

D

A

B

C

Testfälle
1, 2, 3, 4

5
6
7, 8
9, 13
10, 14

11, 12, 15, 16

I
II
III
IV
V
VI
VII

A B C D A||B C||D (A||B) && (C||D)
f
f
f
f
w
w
w

-
f
w
w
f
w
w

f
f
w
w
f
w
w

f
w
w
w
w
w
w

f
w
w
w
-
-
-

-
f
f
w
f
f
w

-
f
w
-
f
w
-

Abschwächung der Anforderungen bei unvollständiger Evaluation:
die Werte der nicht getesteten atomaren Teilentscheidungen bleiben gleich oder 
werden nicht evaluiert

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 16

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Modifizierter Bedingungs-/Entscheidungsüberdeckungstest

(cid:1) Wirkung: vollständige Zweigüberdeckung auf der Objektcodeebene

(Subsumationsbeziehungen s. Liggesmeyer)

(cid:1) Auf Objektcodeebene sind nur atomare Entscheidungen vorhanden

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 17

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Modifizierter Bedingungs-/Entscheidungsüberdeckungstest
(cid:1) Beispiel:  modifizierter Bedingungs-/Entscheidungsüberdeckungstest 

⇒ Zweigüberdeckung auf Objektcodeebene

II III IV VII

I

Zweigüberdeckung 

auf 

Objektcodeebene

A

B

f

f

f

w

w

w

C

f

D

w

w

f

I

II

VI

VII

A

B

f

f

w

w

w

C

f

D

w

w

f

Vergleichend: 

minimale 
Mehrfach-

bedingungs-
überdeckung

f

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 18

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Modifizierter Bedingungs-/Entscheidungsüberdeckungstest

(cid:1) Subsumierungs-Beziehung bei vollständiger Evaluation

(Subsumationsbeziehungen s. Liggesmeyer)

(cid:1) Bei unvollständiger Evaluation:

vollständiger Zweigüberdeckungstest auf Objektcodeebene 
entspricht dem minimalen Mehrfach-Bedingungsüberdeckungstest 
auf Quellcodeebene

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 19

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Modifizierter Bedingungs-/Entscheidungsüberdeckungstest

(cid:1) Berücksichtigung gekoppelter Teilentscheidungen

Schwache 
Kopplung

Die Änderung eines 

Wahrheitswerts kann Einfluss 
nehmen auf die Wahrheitswerte 
der übrigen Teilentscheidungen
(Beispiele s. Liggesmeyer)

Starke 
Kopplung
Die Änderung eines 

Wahrheitswerts ändert stets die 
Wahrheitswerte der gekoppelten, 

Teilentscheidungen

⇒ nicht alle Wahrheitswertekombinationen erzeugbar 
⇒ nicht alle erforderlichen Testfälle erzeugbar bzw. schwierig

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 20

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Mehrfach-Bedingungsüberdeckungstest (multiple condition coverage)

(cid:1) Test aller Wahrheitswertekombinationen der atomaren 

Teilentscheidungen

(cid:1) Umfassender, aber aufwendiger Test zusammengesetzter 

Entscheidungen (n Teilentscheidungen  ⇒ 2n Testfälle)
(Subsumationsbeziehungen s. Liggesmeyer)

(cid:1) Aufwandsreduktion durch: 

- unvollständige Evaluation
- gekoppelte Teilentscheidungen

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 21

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Mehrfach-Bedingungsüberdeckungstest
(cid:1) Beispiele für die Anzahl der Testfälle:

Entscheidung:

# Wahrheitswertekombinationen bzw. #Testfälle

mit 

vollständiger 
Evaluation

Reduktion durch 
unvollständige 

Reduktion durch 

gekoppelte 

Evaluation

Teilentscheidungen

24 = 16

25 = 32

7

6

((A || B) && (C || D))

((Zchn == ‘A’) || 
(Zchn == ‘E’) || 
(Zchn == ‘I’) || 
(Zchn == ‘O’) || 
(Zchn == ‘U’))

Testgrundsatz: 
die Testumgebung sollte möglichst ähnlich zur Produktionssoftware sein 
(z.B. in Hinblick auf unvollständige Evaluation)

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 22

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Schwierigkeiten

(cid:1) Problem: Definition eines aussagekräftigen Testmaßes:

Testmaß  = 

Anzahl der getesteten Objekte

Gesamtzahl der als testbar vorausgesetzten vorhandenen Objekte

Welche bzw. 

wieviele Testfälle 

sind möglich?

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 23

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Schwierigkeiten

(cid:1) Auswertung zusammengesetzter Entscheidungen variiert

(cid:1) Instrumentierung zur Registrierung von Bedingungsüberdeckungen 

im Objektcode
(Beispiel s. Liggesmeyer)

- manche Teilentscheidungen lassen sich auch im Objektcode nicht realisieren

- explizite Evaluation von Teilentscheidungen geht im Allgemeinen nicht 
(Änderung des Programmverhaltens)

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 24

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.6 Bedingungsüberdeckungstest C3
Schwierigkeiten

(cid:1) Beispiel für die Instrumentierung mit einer Booleschen Funktion

if ((Zchn == ‘A’) ||

(Zchn == ‘E’) ||    
(Zchn == ‘I’) || 
(Zchn == ‘O’) || 
(Zchn == ‘U’)) 

{ …

Instrumentierung 
mit Funktion: registriere(boolean,int)

if registriere(((registriere(Zchn == ‘A’,2)) ||

(registriere(Zchn == ‘E’,3)) ||    
(registriere(Zchn == ‘I’,4)) || 
(registriere(Zchn == ‘O’,5)) || 
(registriere(Zchn == ‘U’,6))),1) 

{ …

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 25

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.7 LCSAJ-Test

(cid:1) Ursprünglich: v.a. für den Test von Programmen in linearen 

Programmiersprachen, die viele Sprünge nutzen (z.B. Fortran, Basic)

(cid:1) Testziel: Überdeckung aller möglichen linearen Codesequenzen 

eines Programms (LCSAJ: Linear Code Sequence And Jump)

(cid:1) Lineare Codesequenz: Folge von Anweisungen + Sprung

Tripel: (erste Anweisung, letzte Anweisung, Sprungziel)
Beispiel: (1,n,n+x)

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 26

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.7 LCSAJ-Test
(cid:1) Beispiel: Fortran-Routine mit 5 möglichen LCSAJs

LCSAJs:

2. 
(1,2,5)

3. 
(1,2,8)

1. 
(1,4,Exit)

4. 
(5,9,Exit) 5. 

(8,9,Exit)

1       SUBROUTINE MinMax(Min,Max,NEqual)
2       IF (Max – Min) 20, 10, 30
3  10   NEqual = 0
4       RETURN
5  20   I = Max
6       Max = Min
7       Min = I
8  30   NEqual = 1
9       RETURN
10      END

(cid:1) Testfälle zur Überdeckung der LCSAJs:

- Testfall 1: Min = Max = 100 ⇒ Überdeckung von LCSAJ 1
- Testfall 2: Min = 100, Max = 50 ⇒ Überdeckung von LCSAJ 2, 4, 5
- Testfall 3: Min = 50, Max = 100 ⇒ Überdeckung von LCSAJ 3, 5

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 27

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.7 LCSAJ-Test

(cid:1) Maß für die erreichte Überdeckung:

Überdeckungsgrad = 

Anzahl der mindestens einmal ausgeführten LCSAJs

Gesamtzahl aller möglichen LCSAJs

(cid:1) Im Beispiel: Einsatz von Testfall 1 und 2

Überdeckung1+2 =                  = 0,8   (80% Überdeckung)

4

5

(cid:1) Leistungsfähigkeit: Erfolgsquote ca. 85% 

(v.a. stark bei Kontrollflussfehlern, aber auch sehr gut bei Berechnungsfehlern)

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 28

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.7 LCSAJ-Test

(cid:1) Dicht am Programmtext (weniger am Kontrollflussgraphen) 

orientiert

(cid:1) Überdeckungsgrad = 1 ⇒ vollständige Zweigüberdeckung

(cid:1) Nicht ausführbare LCSAJs sind möglich 

(cid:1) Erweiterungen:

- Alternative Überdeckungsmaße

- Erweiterung der Anwendbarkeit auf Sprachen, die auf Sprünge 

weitgehend verzichten (z.B. C, Java): Verallgemeinerung des 
Sprungbegriffs

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 29

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.7 LCSAJ-Test

(cid:1) Alternative Überdeckungsmaße (basierend auf alternativen 

Überdeckungskriterien)
Zusammensetzen von LCSAJs ergibt Teilpfade (Subpfade)

Überdeckungskriterium: Test der
- Teilpfade, die aus n LCSAJs bestehen
- vollständige Pfade, die bis zu n LCSAJs enthalten

Anzahl der ausgeführten Subpfade aus n LCSAJs

+ Anzahl der ausgeführten vollständigen Pfade aus bis zu n LCSAJs

Gesamtzahl der Subpfade aus n LCSAJs

+ Gesamtanzahl der vollständigen Pfade aus bis zu n LCSAJs

TERn+2 = 

Test 
Effectiveness 
Ratio

Anweisung- und 
Zweigüberdeckung 
per Definition

TER1 = 

TER2 = 

Anzahl der ausgeführten Anweisungen

Anzahl der Anweisungen

Anzahl der ausgeführten Zweige

Anzahl der Zweige

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 30

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.7 LCSAJ-Test

(cid:1) Alternative Überdeckungsmaße (basierend auf alternativen 

Überdeckungskriterien)

- Eine vollständige Überdeckung der Pfade aus n LCSAJs stellt eine 

vollständige Überdeckung der Pfade aus weniger als n LCSAJs 
sicher

Es gilt also:

(TERn = 1) ⇒ (TERn-1 = 1) ⇒ ...     ⇒ (TER3 = 1) ⇒ (TER2 = 1) ⇒ (TER1 = 1)

- TERn+2 entspricht dem vollständigen Pfadtest, falls gilt:

das Programm enthält keinen Pfad, der länger als n LCSAJs ist

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 31

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.7 LCSAJ-Test

(cid:1) Erweiterung der Anwendbarkeit durch Verallgemeinerung des 

Sprungbegriffs:

Sprung im weiteren Sinne:

Kontrolltransfer von einer Programmzeile m zu 
einer Zeile n (n „ m), 

wobei zwischen den Zeilen n und m 
ausführbarer Code existieren muss

1
2
3
…
n
n+1
…
m
…

…

…

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 32

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.7 LCSAJ-Test

(cid:1) Erweiterung der Anwendbarkeit durch Verallgemeinerung des 

Sprungbegriffs:

2. 
(1,4,6)

1. 
(1,5,Exit)

3. (6,6,12)

5. 
(6,12,Exit)

4. (12,12,Exit)

1  bool minMax (int& min, int& max)
2  {
3    int hilf;
4    if (min == max)
5          return(false);
6    else if (min > max)
7    {
8          hilf = min;
9          min = max;
10         max = hilf;
11   } 
12   return(true);
13 }

Testfall 1: 
min = max = 10 
⇒ LCSAJ: 1

Testfall 2: 
min = 50, max = 10 
⇒ LCSAJ: 2, 4, 5

Testfall 3: 
min = 10, max = 50 
⇒ LCSAJ: 2, 3, 4

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 33

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.8 McCabe-Überdeckung

(cid:1) Alternative Bezeichnung: Basic-Path-Test

(cid:1) Ansatz von Thomas J. McCabe, Mitte 70er Jahre

(cid:1) Prinzip: 

Zerlegung des Kontrollflussgraphen in eine 
minimale Menge von Elementarpfaden (Basic Paths)

(cid:1) Darstellung von Pfaden p

- als Elemente eines Vektorraums / als Vektoren 
- als Linearkombination der Elementarpfade p1, ..., pn (in Vektordarstellung)

p = k1 · p1 + k2 · p2 + ... + kn · pn

mit k1, k2, ..., kn: Konstanten

(cid:1) sehr leistungsfähig; subsumiert die Zweigüberdeckung

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 34

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.8 McCabe-Überdeckung
Prinzip am Beispiel:

0

1

1

4

3

7

5

2

4

2

3

5

6

Nummerierung der Kanten von 1 bis |E| 
mit |E| = Anzahl Kanten (Edges), hier: 7

|N| = Anzahl Knoten (Nodes), hier |N| = 6
Jeder Pfad kann als Vektor dargestellt werden:

p1 = 

1
1
1
0
0
0
1

Zahl in der i-ten Vektorkomponente = 
Anzahl wie oft der Pfad die i-te Kante 
durchläuft

⇒

Pfad p1 durchläuft folglich die Kanten 1, 
2, 3 und 7 je einmal

Keine 1:1-Beziehung zwischen Pfad und seiner Vektordarstellung:
Abstraktion von der Reihenfolge der besuchten Knoten
⇒ verschiedene Pfade werden durch den gleichen Vektor repräsentiert

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 35

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.8 McCabe-Überdeckung

0

1

1

4

3

7

5

2

4

2

3

5

6

(cid:1) Minimale Menge von Elementarpfaden = Basis

⇒

jeder beliebige geschlossene Pfad als 
Linearkombination über der Basis darstellbar

(cid:1) Mächtigkeit der Basis |B|:

für stark zusammenhängende Graphen G gilt:

|B| = |E| - |N| + 1
= zyklomatische Zahl von G

Erweiterung des Kontrollflussgraphen
⇒ |B| = |E| - |N| + 2

geschlossener Pfad: Start- und Endknoten fallen zusammen

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 36

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.8 McCabe-Überdeckung

Vorgehen in Zusammenfassung:

(cid:1) Erstelle den Kontrollflussgraphen

(cid:1) Erstelle eine minimale Menge von Elementarpfaden (Basis)

(cid:1) Erzeuge einen Testfall für jeden Elementarpfad: die 

zyklomatische Zahl gibt die Anzahl der Elementarpfade (und 
damit auch die maximale Anzahl an Testfällen)

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 37

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.8 McCabe-Überdeckung

Mächtigkeit der Basis: 
|B| = |E| - |N| + 2 = 7 – 6 + 2 = 3

Pfad p4 über die Knoten: 0, 1, 2, 3, 4, 5
als Linearkombination der Elementarpfade:

0

1

1
4

3

7

5

2

5

2
3

4

6

0

1

1
4

3

7

5

2

5

2
3

4

6

0

1

1
4

3

7

5

2

5

2
3

4

6

- Es gilt im Allgemeinen: 

die Basis ist nicht eindeutig
⇒ Testfallkonstruktion ist nicht eindeutig

-

|B| auch als Maß für die Komplexität 
geeignet (zyklomatische Komplexität)

Folie 38

Software-Qualität, Sommersemester 16

(Beispiel s. Hoffmann)

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

3  Kontrollflussorientierter Test
3.9 Zusammenfassung

Grenzen des Software-Tests:

(cid:1) Unklare oder fehlende Anforderungen

(cid:1) Programmkomplexität (Testgenauigkeit vs. Ressourcen)

(cid:1) Mangelnde Werkzeugunterstützung (v.a. für die 

Testfallkonstruktion)

(cid:1) Fehlende Management-Unterstützung

(cid:1) Ausbildungs- und Fortbildungsdefizite

(cid:1) Zeitprobleme

(cid:1) Tests nehmen nur (möglichst gute) Stichproben

(cid:1) Nochmal: Testen kann nur die Anwesenheit von Fehlern gezeigt 

werden und niemals die Korrektheit des Programms

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 39

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.9 Zusammenfassung

Pfadüberdeckungstest

Strukturierter 
Pfadtest 
(k>=2)

Modifizierter 
boundary 
interior-Test

LCSAJ-Test McCabe-

Über-
deckungs-
test

Boundary 
interior-Test

Zweigüberdeckungstest

Anweisungsüberdeckungstest

Mehrfach-Bedingungs-
überdeckungstest

Modifizierter Bedingungs-
/Entscheidungsüber-
deckungstest

Minimaler Mehrfach-
Bedingungsüber-
deckungstest

Bedingungs-
/Entscheidungsüber-
deckungstest

Einfacher 
Bedingungsüber-
deckungstest

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 40

Software-Qualität, Sommersemester 16

3  Kontrollflussorientierter Test
3.9 Zusammenfassung

Prüftechnik

dynamisch

statisch

funktions-
orientiert

struktur-
orientiert

diversifizierend weitere (z.B. 
statistischer 
Test, error 
guessing)

verifizierend

analysierend

datenfluss-
orientiert

kontrollfluss-
orientiert

. . .

algebraisch, 
math. Beweise

Zusicherungen

automatenbasiert

Stilanalyse

Slicing

Anomalie-
analyse

Inspektion, 
Review

Prof. Dr. E. Pulvermüller
Universität Osnabrück, Arbeitsgruppe Software Engineering

Folie 41

Software-Qualität, Sommersemester 16

